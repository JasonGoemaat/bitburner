{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/Corporation/EmployeePositions.ts","webpack:///./src/Corporation/data/Constants.ts","webpack:///./src/Corporation/IndustryData.tsx","webpack:///./src/Corporation/data/BaseResearchTree.ts","webpack:///./src/utils/JSONReviver.ts","webpack:///./src/Locations/data/CityNames.ts","webpack:///./src/utils/helpers/getRandomInt.ts","webpack:///./src/Corporation/MaterialSizes.ts","webpack:///./src/Corporation/ui/MoneyCost.tsx","webpack:///./src/Corporation/Material.ts","webpack:///./src/Corporation/Warehouse.ts","webpack:///./src/ui/React/DialogBox.tsx","webpack:///./src/Corporation/ResearchMap.ts","webpack:///./src/utils/helpers/isString.ts","webpack:///./src/Corporation/OfficeSpace.ts","webpack:///./src/Corporation/Product.ts","webpack:///./src/Locations/createCityMap.ts","webpack:///./src/Locations/Cities.ts","webpack:///./src/Corporation/ResearchTree.ts","webpack:///./src/ui/numeralFormat.ts","webpack:///./src/Settings/SettingEnums.ts","webpack:///./src/Themes/Themes.ts","webpack:///./src/Themes/data/index.ts","webpack:///./src/Themes/Styles.ts","webpack:///./src/ScriptEditor/ui/themes.ts","webpack:///./src/ui/React/AlertManager.tsx","webpack:///./src/Corporation/Actions.ts","webpack:///./src/Themes/data/default/index.ts","webpack:///./src/Themes/data/default-lite/index.ts","webpack:///./src/Themes/data/monokai-ish/index.ts","webpack:///./src/Themes/data/warmer/index.ts","webpack:///./src/Themes/data/dark-plus/index.ts","webpack:///./src/Themes/data/mayukai-dark/index.ts","webpack:///./src/Themes/data/purple/index.ts","webpack:///./src/Themes/data/smooth-green/index.ts","webpack:///./src/Themes/data/dracula/index.ts","webpack:///./src/Themes/data/dark-blue/index.ts","webpack:///./src/Themes/data/discord-like/index.ts","webpack:///./src/Themes/data/one-dark/index.ts","webpack:///./src/Themes/data/muted-gold-blue/index.ts","webpack:///./src/Themes/data/light/index.ts","webpack:///./src/Corporation/Research.ts","webpack:///./src/Corporation/data/ResearchMetadata.ts","webpack:///./src/Settings/Settings.ts","webpack:///./src/Themes/data/default/screenshot.png","webpack:///./src/Themes/data/default-lite/screenshot.png","webpack:///./src/Themes/data/monokai-ish/screenshot.png","webpack:///./src/Themes/data/warmer/screenshot.png","webpack:///./src/Themes/data/dark-plus/screenshot.png","webpack:///./src/Themes/data/mayukai-dark/screenshot.png","webpack:///./src/Themes/data/purple/screenshot.png","webpack:///./src/Themes/data/smooth-green/screenshot.png","webpack:///./src/Themes/data/dracula/screenshot.png","webpack:///./src/Themes/data/dark-blue/screenshot.png","webpack:///./src/Themes/data/discord-like/screenshot.png","webpack:///./src/Themes/data/one-dark/screenshot.png","webpack:///./src/Themes/data/muted-gold-blue/screenshot.png","webpack:///./src/Themes/data/light/screenshot.png","webpack:///./src/Corporation/Industry.ts","webpack:///./src/utils/Validator.ts","webpack:///./src/utils/calculateEffectWithFactors.ts","webpack:///./src/utils/StringHelperFunctions.ts","webpack:///./src/Corporation/Employee.ts","webpack:///./src/Corporation/ProductRatingWeights.ts","webpack:///./src/utils/EventEmitter.ts","webpack:///./src/ui/React/Modal.tsx","webpack:///./src/utils/helpers/exceptionAlert.ts","webpack:///./src/Corporation/ui/Helpers.tsx","webpack:///./src/lib.ts"],"names":["root","factory","exports","module","define","amd","window","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","EmployeePositions","Operations","Engineer","Business","Management","RandD","Training","Unassigned","AllCorporationStates","CorporationConstants","INITIALSHARES","SHARESPERPRICEUPDATE","IssueNewSharesCooldown","SellSharesCooldown","CyclesPerMarketCycle","CyclesPerIndustryStateCycle","SecsPerMarketCycle","Cities","CityName","Aevum","Chongqing","Sector12","NewTokyo","Ishima","Volhaven","WarehouseInitialCost","WarehouseInitialSize","WarehouseUpgradeBaseCost","OfficeInitialCost","OfficeInitialSize","OfficeUpgradeBaseCost","BribeThreshold","BribeToRepRatio","ProductProductionCostRatio","DividendMaxRate","EmployeeSalaryMultiplier","CyclesPerEmployeeRaise","EmployeeRaiseAmount","BaseMaxProducts","AllMaterials","AllIndustryTypes","AllUnlocks","AllUpgrades","AllResearch","FundingRoundShares","FundingRoundMultiplier","AvgProfitLength","Industries","Energy","Utilities","Agriculture","Fishing","Mining","Food","Tobacco","Chemical","Pharmaceutical","Computer","Robotics","Software","Healthcare","RealEstate","IndustryStartingCosts","IndustryResearchTrees","getBaseResearchTreeCopy","getProductIndustryResearchTreeCopy","makeNode","research","ResearchMap","Error","Node","text","cost","createBaseResearchTreeNodes","rootNode","autoBrew","autoParty","autoDrugs","bulkPurchasing","cph4","drones","dronesAssembly","dronesTransport","goJuice","hrRecruitment","hrTraining","joywire","marketta1","marketta2","overclock","scAssemblers","stimu","addChild","baseResearchTree","ResearchTree","setRoot","researchTree","upgradeFulcrum","upgradeCapacity1","upgradeCapacity2","upgradeDashboard","Reviver","ctor","console","warn","constructors","fromJSON","obj","undefined","validationData","validateObject","Generic_toJSON","ctorName","keys","index","Generic_fromJSON","getRandomInt","min","max","lower","Math","upper","floor","random","MaterialSizes","Water","Plants","Metal","Hardware","Chemicals","Drugs","Robots","AICores","useStyles","makeStyles","theme","createStyles","unbuyable","color","palette","action","disabled","money","colors","MoneyCost","props","classes","corp","funds","className","numeralWrapper","formatMoney","Material","constructor","params","this","init","getMarkupLimit","qlt","mku","dmd","dmdR","cmp","cmpR","bCost","mv","error","processMarket","priceChange","compChange","dmdChange","toJSON","Warehouse","loc","size","materials","smartSupplyUseLeftovers","industry","updateSize","unlockUpgrades","smartSupplyEnabled","updateMaterialSizeUsed","sizeUsed","matName","mat","qty","corporation","level","getStorageMultiplier","e","exceptionAlert","dialogBoxCreate","txt","styles","AlertEvents","emit","component","sx","dangerouslySetInnerHTML","__html","metadata","researchMetadata","Research","isString","String","OfficeSpace","total","atCapacity","employees","process","marketCycles","hasResearch","emp","hireRandomEmployee","pos","employee","nextPos","calculateTotalEmployees","calculateNextEmployees","maxEne","maxHap","maxMor","autoCoffee","perfMult","lastCycleRevenue","pow","totalSalary","ene","coffeeMult","mult","coffeeEmployees","mor","hap","partyMult","partyEmployees","minEne","minMor","minHap","calculateEmployeeProductivity","employeeNextJobs","employeeJobs","employeeProd","prod","calculateProductivity","document","getElementById","int","cha","exp","cre","eff","sal","Employee","intelligence","charisma","experience","creativity","efficiency","salary","generateRandomString","assignSingleJob","job","autoAssignJob","target","count","getCoffeeCost","setCoffee","setParty","Product","createCityMap","demand","competition","markup","createCity","designCost","advCost","quality","per","performance","dur","durability","rel","reliability","aes","aesthetics","fea","features","siz","reqMats","req","createProduct","fin","opProd","engrProd","mgmtProd","mgmtFactor","prodMult","progress","prog","creationProd","finishProduct","totalProd","engrRatio","mgmtRatio","rndRatio","opsRatio","busRatio","totalMult","sciResearch","sciFac","calculateRating","advMult","busmgtgRatio","isFinite","awareness","popularity","reqMat","weights","ProductRatingWeights","type","rat","Quality","Performance","Durability","Reliability","Aesthetics","Features","initValue","map","cities","JSON","parse","stringify","children","parent","findNode","res","setParent","getAllNodes","queue","node","getAdvertisingMultiplier","getMultiplierHelper","getEmployeeChaMultiplier","getEmployeeCreMultiplier","getEmployeeEffMultiplier","getEmployeeIntMultiplier","getProductionMultiplier","getProductProductionMultiplier","getSalesMultiplier","getScientificResearchMultiplier","propName","researched","advertisingMult","employeeChaMult","employeeCreMult","employeeEffMult","employeeIntMult","productionMult","productProductionMult","salesMult","sciResearchMult","storageMult","extraFormats","extraNotations","gigaMultiplier","defaultLocale","updateLocale","numeral","locale","format","abs","answer","formatBigNumber","formatReallyBigNumber","decimalPlaces","nAbs","Infinity","repeat","str","formatHp","formatSkill","formatExp","formatHashes","formatReputation","formatFavor","formatSecurity","toFixed","formatRAM","Settings","UseIEC60027_2","formatPercentage","formatter","formatServerSecurity","formatRespect","formatWanted","formatMultiplier","formatSleeveShock","formatSleeveSynchro","formatSleeveMemory","formatPopulation","formatStamina","formatShares","formatInfiltrationSecurity","formatThreads","formatStaneksGiftHeat","formatStaneksGiftCharge","formatStaneksGiftPower","parseCustomLargeNumber","numericRegExp","RegExp","join","match","NaN","number","notation","notationIndex","indexOf","parseFloat","largestAbsoluteNumber","n1","n2","n3","isNaN","parseMoney","numeralValue","parsed","selfParsed","PurchaseAugmentationsOrderSetting","OwnedAugmentationsOrderSetting","defaultTheme","predefined","defaultStyles","lineHeight","fontFamily","defaultMonacoTheme","base","inherit","common","accent","bg","fg","syntax","tag","entity","string","regexp","keyword","comment","constant","ui","line","panel","selected","border","selection","EventEmitter","NewIndustry","divisions","find","Industry","NewCity","division","city","offices","UnlockUpgrade","upgrade","price","unlock","LevelUpgrade","baseCost","basePrice","priceMult","upgrades","IssueDividends","rate","dividendRate","SellMaterial","amt","replace","temp","eval","includes","sCost","toUpperCase","q","tempQty","maxsll","toString","prd","sllman","SellProduct","product","all","tempCity","SetSmartSupply","warehouse","smartSupply","SetSmartSupplyUseLeftovers","material","useLeftover","BuyMaterial","buy","BulkPurchase","matSize","maxAmount","SellShares","player","numShares","public","shareSaleCooldown","stockSaleResults","calculateShareSale","profit","newSharePrice","newSharesUntilUpdate","issuedShares","sharePrice","shareSalesUntilPriceUpdate","gainMoney","BuyBackShares","buybackPrice","loseMoney","AssignJob","office","employeeName","values","AutoAssignJob","UpgradeOfficeSize","initialPriceMult","round","BuyCoffee","ThrowParty","costPerEmployee","PurchaseWarehouse","warehouses","UpgradeWarehouseCost","Array","from","reduce","acc","UpgradeWarehouse","sizeUpgradeCost","HireAdVert","getAdVertCost","applyAdVert","MakeProduct","productName","designInvest","marketingInvest","makesProducts","maxProducts","products","trim","researchName","ExportMaterial","divisionName","cityName","sanitizedAmt","isRelevantMaterial","exportObj","ind","CancelExportMaterial","LimitProductProduction","prdman","LimitMaterialProduction","SetMaterialMarketTA1","on","marketTa1","SetMaterialMarketTA2","marketTa2","SetProductMarketTA1","SetProductMarketTA2","Theme","description","credit","screenshot","img1","primarylight","primary","primarydark","successlight","success","successdark","errorlight","errordark","secondarylight","secondary","secondarydark","warninglight","warning","warningdark","infolight","info","infodark","welllight","well","white","black","hp","hack","combat","rep","backgroundprimary","backgroundsecondary","button","reference","desc","defaultSettings","ActiveScriptsServerPageSize","ActiveScriptsScriptPageSize","AutosaveInterval","CodeInstructionRunTime","DisableASCIIArt","DisableHotkeys","DisableTextEffects","DisableOverviewProgressBars","EnableBashHotkeys","TimestampsFormat","Locale","MaxRecentScriptsCapacity","MaxLogCapacity","MaxPortCapacity","MaxTerminalCapacity","RemoteFileApiPort","SaveGameOnFileSave","SuppressBuyAugmentationConfirmation","SuppressFactionInvites","SuppressMessages","SuppressTravelConfirmation","SuppressBladeburnerPopup","SuppressTIXPopup","SuppressSavedGameToast","SuppressAutosaveDisabledWarnings","ExcludeRunningScriptsFromSave","IsSidebarOpened","overview","x","y","opened","EditorTheme","OwnedAugmentationsOrder","AcquirementTime","PurchaseAugmentationsOrder","Default","MonacoTheme","MonacoInsertSpaces","MonacoFontSize","MonacoVim","MonacoWordWrap","assign","load","saveString","save","lastCycleExpenses","thisCycleRevenue","thisCycleExpenses","startingCost","reFac","robFac","aiFac","advFac","prodMats","hwFac","getProductDescriptionText","getMaximumNumberProducts","additional","hasMaximumNumberProducts","calculateProductionFactors","multSum","cityMult","updateWarehouseSizeUsed","prodName","state","newInd","employeeSalary","officeLoc","processMaterialMarket","processProductMarket","popularityGain","getDreamSenseGain","awarenessGain","Number","MAX_VALUE","processMaterials","isArray","processProducts","wh","foo","change","revenue","expenses","imp","buyAmt","maxAmt","smartBuy","smartSupplyStore","worseAmt","totalSize","freeSpace","maxProd","getOfficeProductivity","totalMatSize","tmp","reqMatName","normQty","producableFrac","reqMatQtyNeeded","fooProd","fooI","sll","businessFactor","getBusinessFactor","advertisingFactor","getAdvertisingFactors","marketFactor","getMarketFactor","markupLimit","numerator","sqrtNumerator","sqrtDenominator","denominator","sqrt","optimalPrice","marketTa2Price","sellAmt","totalExp","expI","amtStr","expIndustry","expWarehouse","processProduct","totalProfit","forProduct","netStorageSize","pCost","sCostString","discontinueProduct","numAdVerts","businessProd","calculateEffectWithFactors","awarenessFac","popularityFac","ratioFac","updateResearchTree","validator","paramValidator","func","default","expFac","linearFac","chars","charAt","morale","happiness","energy","gain","det","trainingEff","effCre","effCha","effInt","effEff","prodBase","uuidv4","subscribe","uuid","subscribers","sub","modal","display","alignItems","justifyContent","paper","backgroundColor","background","main","boxShadow","dark","padding","maxWidth","maxHeight","overflow","scrollbarWidth","Modal","disableRestoreFocus","disableScrollLock","disableEnforceFocus","disableAutoFocus","open","onClose","closeAfterTransition","in","msg","file","v","fileName","lineNumber"],"mappings":"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","file":"bb-lib.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"BBLib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BBLib\"] = factory();\n\telse\n\t\troot[\"BBLib\"] = factory();\n})(window, function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonpBBLib\"] = window[\"webpackJsonpBBLib\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([219,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { IMap } from \"../types\";\n\nexport const EmployeePositions: IMap<string> = {\n  Operations: \"Operations\",\n  Engineer: \"Engineer\",\n  Business: \"Business\",\n  Management: \"Management\",\n  RandD: \"Research & Development\",\n  Training: \"Training\",\n  Unassigned: \"Unassigned\",\n};\n","import { CityName } from \"./../../Locations/data/CityNames\";\nconst CyclesPerMarketCycle = 50;\nconst AllCorporationStates = [\"START\", \"PURCHASE\", \"PRODUCTION\", \"SALE\", \"EXPORT\"];\nexport const CorporationConstants: {\n  INITIALSHARES: number;\n  SHARESPERPRICEUPDATE: number;\n  IssueNewSharesCooldown: number;\n  SellSharesCooldown: number;\n  CyclesPerMarketCycle: number;\n  CyclesPerIndustryStateCycle: number;\n  SecsPerMarketCycle: number;\n  Cities: string[];\n  WarehouseInitialCost: number;\n  WarehouseInitialSize: number;\n  WarehouseUpgradeBaseCost: number;\n  OfficeInitialCost: number;\n  OfficeInitialSize: number;\n  OfficeUpgradeBaseCost: number;\n  BribeThreshold: number;\n  BribeToRepRatio: number;\n  ProductProductionCostRatio: number;\n  DividendMaxRate: number;\n  EmployeeSalaryMultiplier: number;\n  CyclesPerEmployeeRaise: number;\n  EmployeeRaiseAmount: number;\n  BaseMaxProducts: number;\n  AllCorporationStates: string[];\n  AllMaterials: string[];\n  AllIndustryTypes: string[];\n  AllUnlocks: string[];\n  AllUpgrades: string[];\n  AllResearch: string[];\n  FundingRoundShares: number[];\n  FundingRoundMultiplier: number[];\n  AvgProfitLength: number;\n} = {\n  INITIALSHARES: 1e9, //Total number of shares you have at your company\n  SHARESPERPRICEUPDATE: 1e6, //When selling large number of shares, price is dynamically updated for every batch of this amount\n  IssueNewSharesCooldown: 216e3, // 12 Hour in terms of game cycles\n  SellSharesCooldown: 18e3, // 1 Hour in terms of game cycles\n\n  CyclesPerMarketCycle: CyclesPerMarketCycle,\n  CyclesPerIndustryStateCycle: CyclesPerMarketCycle / AllCorporationStates.length,\n  SecsPerMarketCycle: CyclesPerMarketCycle / 5,\n\n  Cities: [\n    CityName.Aevum,\n    CityName.Chongqing,\n    CityName.Sector12,\n    CityName.NewTokyo,\n    CityName.Ishima,\n    CityName.Volhaven,\n  ],\n\n  WarehouseInitialCost: 5e9, //Initial purchase cost of warehouse\n  WarehouseInitialSize: 100,\n  WarehouseUpgradeBaseCost: 1e9,\n\n  OfficeInitialCost: 4e9,\n  OfficeInitialSize: 3,\n  OfficeUpgradeBaseCost: 1e9,\n\n  BribeThreshold: 100e12, //Money needed to be able to bribe for faction rep\n  BribeToRepRatio: 1e9, //Bribe Value divided by this = rep gain\n\n  ProductProductionCostRatio: 5, //Ratio of material cost of a product to its production cost\n\n  DividendMaxRate: 1,\n\n  EmployeeSalaryMultiplier: 3, // Employee stats multiplied by this to determine initial salary\n  CyclesPerEmployeeRaise: 400, // All employees get a raise every X market cycles\n  EmployeeRaiseAmount: 50, // Employee salary increases by this (additive)\n\n  BaseMaxProducts: 3, // Initial value for maximum number of products allowed\n  AllCorporationStates: AllCorporationStates,\n  AllMaterials: [\n    \"Water\",\n    \"Energy\",\n    \"Food\",\n    \"Plants\",\n    \"Metal\",\n    \"Hardware\",\n    \"Chemicals\",\n    \"Drugs\",\n    \"Robots\",\n    \"AI Cores\",\n    \"Real Estate\",\n  ],\n  AllIndustryTypes: [\n    \"Energy\",\n    \"Utilities\",\n    \"Agriculture\",\n    \"Fishing\",\n    \"Mining\",\n    \"Food\",\n    \"Tobacco\",\n    \"Chemical\",\n    \"Pharmaceutical\",\n    \"Hardware\",\n    \"Robotics\",\n    \"Software\",\n    \"Healthcare\",\n    \"RealEstate\",\n  ],\n  AllUnlocks: [\n    \"Export\",\n    \"Smart Supply\",\n    \"Market Research - Demand\",\n    \"Market Data - Competition\",\n    \"VeChain\",\n    \"Shady Accounting\",\n    \"Government Partnership\",\n    \"Warehouse API\",\n    \"Office API\",\n  ],\n  AllUpgrades: [\n    \"Smart Factories\",\n    \"Smart Storage\",\n    \"DreamSense\",\n    \"Wilson Analytics\",\n    \"Nuoptimal Nootropic Injector Implants\",\n    \"Speech Processor Implants\",\n    \"Neural Accelerators\",\n    \"FocusWires\",\n    \"ABC SalesBots\",\n    \"Project Insight\",\n  ],\n  AllResearch: [\n    \"Hi-Tech R&D Laboratory\",\n    \"AutoBrew\",\n    \"AutoPartyManager\",\n    \"Automatic Drug Administration\",\n    \"Bulk Purchasing\",\n    \"CPH4 Injections\",\n    \"Drones\",\n    \"Drones - Assembly\",\n    \"Drones - Transport\",\n    \"Go-Juice\",\n    \"HRBuddy-Recruitment\",\n    \"HRBuddy-Training\",\n    \"JoyWire\",\n    \"Market-TA.I\",\n    \"Market-TA.II\",\n    \"Overclock\",\n    \"Self-Correcting Assemblers\",\n    \"Sti.mu\",\n    \"sudo.Assist\",\n    \"uPgrade: Capacity.I\",\n    \"uPgrade: Capacity.II\",\n    \"uPgrade: Dashboard\",\n    \"uPgrade: Fulcrum\",\n  ],\n  FundingRoundShares: [0.1, 0.35, 0.25, 0.2],\n  FundingRoundMultiplier: [4, 3, 3, 2.5],\n\n  AvgProfitLength: 1,\n};\n","import React from \"react\";\nimport { ResearchTree } from \"./ResearchTree\";\nimport { ICorporation } from \"./ICorporation\";\nimport { getBaseResearchTreeCopy, getProductIndustryResearchTreeCopy } from \"./data/BaseResearchTree\";\nimport { MoneyCost } from \"./ui/MoneyCost\";\n\ninterface IIndustryMap<T> {\n  [key: string]: T | undefined;\n  Energy: T;\n  Utilities: T;\n  Agriculture: T;\n  Fishing: T;\n  Mining: T;\n  Food: T;\n  Tobacco: T;\n  Chemical: T;\n  Pharmaceutical: T;\n  Computer: T;\n  Robotics: T;\n  Software: T;\n  Healthcare: T;\n  RealEstate: T;\n}\n\n// Map of official names for each Industry\nexport const Industries: IIndustryMap<string> = {\n  Energy: \"Energy\",\n  Utilities: \"Water Utilities\",\n  Agriculture: \"Agriculture\",\n  Fishing: \"Fishing\",\n  Mining: \"Mining\",\n  Food: \"Food\",\n  Tobacco: \"Tobacco\",\n  Chemical: \"Chemical\",\n  Pharmaceutical: \"Pharmaceutical\",\n  Computer: \"Computer Hardware\",\n  Robotics: \"Robotics\",\n  Software: \"Software\",\n  Healthcare: \"Healthcare\",\n  RealEstate: \"RealEstate\",\n};\n\n// Map of how much money it takes to start each industry\nexport const IndustryStartingCosts: IIndustryMap<number> = {\n  Energy: 225e9,\n  Utilities: 150e9,\n  Agriculture: 40e9,\n  Fishing: 80e9,\n  Mining: 300e9,\n  Food: 10e9,\n  Tobacco: 20e9,\n  Chemical: 70e9,\n  Pharmaceutical: 200e9,\n  Computer: 500e9,\n  Robotics: 1e12,\n  Software: 25e9,\n  Healthcare: 750e9,\n  RealEstate: 600e9,\n};\n\n// Map of description for each industry\nexport const IndustryDescriptions: IIndustryMap<(corp: ICorporation) => React.ReactElement> = {\n  Energy: (corp: ICorporation) => (\n    <>\n      Engage in the production and distribution of energy.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Energy} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Utilities: (corp: ICorporation) => (\n    <>\n      Distribute water and provide wastewater services.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Utilities} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Agriculture: (corp: ICorporation) => (\n    <>\n      Cultivate crops and breed livestock to produce food.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Agriculture} corp={corp} />\n      <br />\n      Recommended starting Industry: YES\n    </>\n  ),\n  Fishing: (corp: ICorporation) => (\n    <>\n      Produce food through the breeding and processing of fish and fish products.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Fishing} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Mining: (corp: ICorporation) => (\n    <>\n      Extract and process metals from the earth.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Mining} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Food: (corp: ICorporation) => (\n    <>\n      Create your own restaurants all around the world.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Food} corp={corp} />\n      <br />\n      Recommended starting Industry: YES\n    </>\n  ),\n  Tobacco: (corp: ICorporation) => (\n    <>\n      Create and distribute tobacco and tobacco-related products.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Tobacco} corp={corp} />\n      <br />\n      Recommended starting Industry: YES\n    </>\n  ),\n  Chemical: (corp: ICorporation) => (\n    <>\n      Produce industrial chemicals.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Chemical} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Pharmaceutical: (corp: ICorporation) => (\n    <>\n      Discover, develop, and create new pharmaceutical drugs.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Pharmaceutical} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Computer: (corp: ICorporation) => (\n    <>\n      Develop and manufacture new computer hardware and networking infrastructures.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Computer} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Robotics: (corp: ICorporation) => (\n    <>\n      Develop and create robots.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Robotics} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  Software: (corp: ICorporation) => (\n    <>\n      Develop computer software and create AI Cores.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Software} corp={corp} />\n      <br />\n      Recommended starting Industry: YES\n    </>\n  ),\n  Healthcare: (corp: ICorporation) => (\n    <>\n      Create and manage hospitals.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.Healthcare} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n  RealEstate: (corp: ICorporation) => (\n    <>\n      Develop and manage real estate properties.\n      <br />\n      <br />\n      Starting cost: <MoneyCost money={IndustryStartingCosts.RealEstate} corp={corp} />\n      <br />\n      Recommended starting Industry: NO\n    </>\n  ),\n};\n\n// Map of available Research for each Industry. This data is held in a\n// ResearchTree object\nexport const IndustryResearchTrees: IIndustryMap<ResearchTree> = {\n  Energy: getBaseResearchTreeCopy(),\n  Utilities: getBaseResearchTreeCopy(),\n  Agriculture: getBaseResearchTreeCopy(),\n  Fishing: getBaseResearchTreeCopy(),\n  Mining: getBaseResearchTreeCopy(),\n  Food: getProductIndustryResearchTreeCopy(),\n  Tobacco: getProductIndustryResearchTreeCopy(),\n  Chemical: getBaseResearchTreeCopy(),\n  Pharmaceutical: getProductIndustryResearchTreeCopy(),\n  Computer: getProductIndustryResearchTreeCopy(),\n  Robotics: getProductIndustryResearchTreeCopy(),\n  Software: getProductIndustryResearchTreeCopy(),\n  Healthcare: getProductIndustryResearchTreeCopy(),\n  RealEstate: getProductIndustryResearchTreeCopy(),\n};\n\nexport function resetIndustryResearchTrees(): void {\n  IndustryResearchTrees.Energy = getBaseResearchTreeCopy();\n  IndustryResearchTrees.Utilities = getBaseResearchTreeCopy();\n  IndustryResearchTrees.Agriculture = getBaseResearchTreeCopy();\n  IndustryResearchTrees.Fishing = getBaseResearchTreeCopy();\n  IndustryResearchTrees.Mining = getBaseResearchTreeCopy();\n  IndustryResearchTrees.Food = getProductIndustryResearchTreeCopy();\n  IndustryResearchTrees.Tobacco = getProductIndustryResearchTreeCopy();\n  IndustryResearchTrees.Chemical = getBaseResearchTreeCopy();\n  IndustryResearchTrees.Pharmaceutical = getProductIndustryResearchTreeCopy();\n  IndustryResearchTrees.Computer = getProductIndustryResearchTreeCopy();\n  IndustryResearchTrees.Robotics = getProductIndustryResearchTreeCopy();\n  IndustryResearchTrees.Software = getProductIndustryResearchTreeCopy();\n  IndustryResearchTrees.Healthcare = getProductIndustryResearchTreeCopy();\n  IndustryResearchTrees.RealEstate = getProductIndustryResearchTreeCopy();\n}\n","// Defines the ResearchTree that is common to all Corporation Industries\n// i.e. all Industries have these types of Research available to unlock\nimport { Research } from \"../Research\";\nimport { ResearchMap } from \"../ResearchMap\";\nimport { ResearchTree, Node } from \"../ResearchTree\";\n\nfunction makeNode(name: string): Node {\n  const research: Research | null = ResearchMap[name];\n  if (research == null) {\n    throw new Error(`Invalid research name: ${name}`);\n  }\n\n  return new Node({ text: research.name, cost: research.cost });\n}\n\n// Creates the Nodes for the BaseResearchTree.\n// Return the Root Node\nfunction createBaseResearchTreeNodes(): Node {\n  const rootNode: Node = makeNode(\"Hi-Tech R&D Laboratory\");\n  const autoBrew: Node = makeNode(\"AutoBrew\");\n  const autoParty: Node = makeNode(\"AutoPartyManager\");\n  const autoDrugs: Node = makeNode(\"Automatic Drug Administration\");\n  const bulkPurchasing: Node = makeNode(\"Bulk Purchasing\");\n  const cph4: Node = makeNode(\"CPH4 Injections\");\n  const drones: Node = makeNode(\"Drones\");\n  const dronesAssembly: Node = makeNode(\"Drones - Assembly\");\n  const dronesTransport: Node = makeNode(\"Drones - Transport\");\n  const goJuice: Node = makeNode(\"Go-Juice\");\n  const hrRecruitment: Node = makeNode(\"HRBuddy-Recruitment\");\n  const hrTraining: Node = makeNode(\"HRBuddy-Training\");\n  const joywire: Node = makeNode(\"JoyWire\");\n  const marketta1: Node = makeNode(\"Market-TA.I\");\n  const marketta2: Node = makeNode(\"Market-TA.II\");\n  const overclock: Node = makeNode(\"Overclock\");\n  const scAssemblers: Node = makeNode(\"Self-Correcting Assemblers\");\n  const stimu: Node = makeNode(\"Sti.mu\");\n\n  autoDrugs.addChild(goJuice);\n  autoDrugs.addChild(cph4);\n\n  drones.addChild(dronesAssembly);\n  drones.addChild(dronesTransport);\n\n  hrRecruitment.addChild(hrTraining);\n\n  marketta1.addChild(marketta2);\n\n  overclock.addChild(stimu);\n\n  rootNode.addChild(autoBrew);\n  rootNode.addChild(autoParty);\n  rootNode.addChild(autoDrugs);\n  rootNode.addChild(bulkPurchasing);\n  rootNode.addChild(drones);\n  rootNode.addChild(hrRecruitment);\n  rootNode.addChild(joywire);\n  rootNode.addChild(marketta1);\n  rootNode.addChild(overclock);\n  rootNode.addChild(scAssemblers);\n\n  return rootNode;\n}\n\nexport function getBaseResearchTreeCopy(): ResearchTree {\n  const baseResearchTree: ResearchTree = new ResearchTree();\n  baseResearchTree.setRoot(createBaseResearchTreeNodes());\n\n  return baseResearchTree;\n}\n\n// Base Research Tree for Industry's that make products\nexport function getProductIndustryResearchTreeCopy(): ResearchTree {\n  const researchTree: ResearchTree = new ResearchTree();\n  const root = createBaseResearchTreeNodes();\n\n  const upgradeFulcrum = makeNode(\"uPgrade: Fulcrum\");\n  const upgradeCapacity1 = makeNode(\"uPgrade: Capacity.I\");\n  const upgradeCapacity2 = makeNode(\"uPgrade: Capacity.II\");\n  const upgradeDashboard = makeNode(\"uPgrade: Dashboard\");\n\n  upgradeCapacity1.addChild(upgradeCapacity2);\n  upgradeFulcrum.addChild(upgradeCapacity1);\n  upgradeFulcrum.addChild(upgradeDashboard);\n  root.addChild(upgradeFulcrum);\n\n  researchTree.setRoot(root);\n\n  return researchTree;\n}\n","/* Generic Reviver, toJSON, and fromJSON functions used for saving and loading objects */\n\nimport { validateObject } from \"./Validator\";\n\nexport interface IReviverValue {\n  ctor: string;\n  data: any;\n}\n\n// A generic \"smart reviver\" function.\n// Looks for object values with a `ctor` property and\n// a `data` property. If it finds them, and finds a matching\n// constructor that has a `fromJSON` property on it, it hands\n// off to that `fromJSON` fuunction, passing in the value.\nexport function Reviver(key: string, value: IReviverValue | null): any {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof value === \"object\" && typeof value.ctor === \"string\" && typeof value.data !== \"undefined\") {\n    // Compatibility for version v0.43.1\n    // TODO Remove this eventually\n    if (value.ctor === \"AllServersMap\") {\n      console.warn(\"Converting AllServersMap for v0.43.1\");\n      return value.data;\n    }\n\n    const ctor = Reviver.constructors[value.ctor];\n\n    if (typeof ctor === \"function\" && typeof ctor.fromJSON === \"function\") {\n      const obj = ctor.fromJSON(value);\n      if (ctor.validationData !== undefined) {\n        validateObject(obj, ctor.validationData);\n      }\n      return obj;\n    }\n  }\n  return value;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Reviver {\n  export const constructors: { [key: string]: any } = {};\n}\n\n// A generic \"toJSON\" function that creates the data expected\n// by Reviver.\n// `ctorName`  The name of the constructor to use to revive it\n// `obj`       The object being serialized\n// `keys`      (Optional) Array of the properties to serialize,\n//             if not given then all of the objects \"own\" properties\n//             that don't have function values will be serialized.\n//             (Note: If you list a property in `keys`, it will be serialized\n//             regardless of whether it's an \"own\" property.)\n// Returns:    The structure (which will then be turned into a string\n//             as part of the JSON.stringify algorithm)\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function Generic_toJSON(ctorName: string, obj: Record<string, any>, keys?: string[]): IReviverValue {\n  if (!keys) {\n    keys = Object.keys(obj); // Only \"own\" properties are included\n  }\n\n  const data: Record<string, unknown> = {};\n  for (let index = 0; index < keys.length; ++index) {\n    const key = keys[index];\n    data[key] = obj[key];\n  }\n  return { ctor: ctorName, data: data };\n}\n\n// A generic \"fromJSON\" function for use with Reviver: Just calls the\n// constructor function with no arguments, then applies all of the\n// key/value pairs from the raw data to the instance. Only useful for\n// constructors that can be reasonably called without arguments!\n// `ctor`      The constructor to call\n// `data`      The data to apply\n// Returns:    The object\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function Generic_fromJSON<T>(ctor: new () => T, data: any): T {\n  const obj: any = new ctor();\n  for (const name in data) {\n    obj[name] = data[name];\n  }\n  return obj;\n}\n","/**\n * All possible Cities in the game. Names only, not actual \"City\" object\n * Implemented as an enum for typing purposes\n */\nexport enum CityName {\n  Aevum = \"Aevum\",\n  Chongqing = \"Chongqing\",\n  Ishima = \"Ishima\",\n  NewTokyo = \"New Tokyo\",\n  Sector12 = \"Sector-12\",\n  Volhaven = \"Volhaven\",\n}\n","/**\n * Gets a random integer bounded by the values passed in.\n * @param min The minimum value in the range.\n * @param max The maximum value in the range.\n */\nexport function getRandomInt(min: number, max: number): number {\n  const lower: number = Math.min(min, max);\n  const upper: number = Math.max(min, max);\n\n  return Math.floor(Math.random() * (upper - lower + 1)) + lower;\n}\n","import { IMap } from \"../types\";\n\n// Map of material (by name) to their sizes (how much space it takes in warehouse)\nexport const MaterialSizes: IMap<number> = {\n  Water: 0.05,\n  Energy: 0.01,\n  Food: 0.03,\n  Plants: 0.05,\n  Metal: 0.1,\n  Hardware: 0.06,\n  Chemicals: 0.05,\n  Drugs: 0.02,\n  Robots: 0.5,\n  AICores: 0.1,\n  RealEstate: 0.005,\n  \"Real Estate\": 0.005,\n  \"AI Cores\": 0.1,\n};\n","import * as React from \"react\";\nimport { numeralWrapper } from \"../../ui/numeralFormat\";\nimport { ICorporation } from \"../ICorporation\";\nimport { Theme } from \"@mui/material/styles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport createStyles from \"@mui/styles/createStyles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    unbuyable: {\n      color: theme.palette.action.disabled,\n    },\n    money: {\n      color: theme.colors.money,\n    },\n  }),\n);\n\ninterface IProps {\n  money: number;\n  corp: ICorporation;\n}\n\nexport function MoneyCost(props: IProps): React.ReactElement {\n  const classes = useStyles();\n  if (!(props.corp.funds > props.money))\n    return <span className={classes.unbuyable}>{numeralWrapper.formatMoney(props.money)}</span>;\n\n  return <span className={classes.money}>{numeralWrapper.formatMoney(props.money)}</span>;\n}\n","import { Generic_fromJSON, Generic_toJSON, IReviverValue, Reviver } from \"../utils/JSONReviver\";\nimport { Export } from \"./Export\";\n\ninterface IConstructorParams {\n  name?: string;\n}\n\nexport class Material {\n  // Name of material\n  name = \"InitName\";\n\n  // Amount of material owned\n  qty = 0;\n\n  // Material's \"quality\". Unbounded\n  qlt = 0;\n\n  // How much demand the Material has in the market, and the range of possible\n  // values for this \"demand\"\n  dmd = 0;\n  dmdR: number[] = [0, 0];\n\n  // How much competition there is for this Material in the market, and the range\n  // of possible values for this \"competition\"\n  cmp = 0;\n  cmpR: number[] = [0, 0];\n\n  // Maximum volatility of this Materials stats\n  mv = 0;\n\n  // Markup. Determines how high of a price you can charge on the material\n  // compared to the market price without suffering loss in # of sales\n  // Quality is divided by this to determine markup limits\n  // e,g, If mku is 10 and quality is 100 then you can markup prices by 100/10 = 10\n  mku = 0;\n\n  // How much of this material is being bought, sold, imported and produced every second\n  buy = 0;\n  sll = 0;\n  prd = 0;\n  imp = 0;\n\n  // Exports of this material to another warehouse/industry\n  exp: Export[] = [];\n\n  // Total amount of this material exported in the last cycle\n  totalExp = 0;\n\n  // Cost / sec to buy this material. AKA Market Price\n  bCost = 0;\n\n  // Cost / sec to sell this material\n  sCost: string | number = 0;\n\n  // Flags to keep track of whether production and/or sale of this material is limited\n  // [Whether production/sale is limited, limit amount]\n  prdman: [boolean, number] = [false, 0]; // Production\n  sllman: [boolean, string | number] = [false, 0]; // Sale\n\n  // Flags that signal whether automatic sale pricing through Market TA is enabled\n  marketTa1 = false;\n  marketTa2 = false;\n  marketTa2Price = 0;\n\n  // Determines the maximum amount of this material that can be sold in one market cycle\n  maxsll = 0;\n\n  constructor(params: IConstructorParams = {}) {\n    if (params.name) {\n      this.name = params.name;\n    }\n    this.init();\n  }\n\n  getMarkupLimit(): number {\n    return this.qlt / this.mku;\n  }\n\n  init(): void {\n    switch (this.name) {\n      case \"Water\":\n        this.dmd = 75;\n        this.dmdR = [65, 85];\n        this.cmp = 50;\n        this.cmpR = [40, 60];\n        this.bCost = 1500;\n        this.mv = 0.2;\n        this.mku = 6;\n        break;\n      case \"Energy\":\n        this.dmd = 90;\n        this.dmdR = [80, 99];\n        this.cmp = 80;\n        this.cmpR = [65, 95];\n        this.bCost = 2000;\n        this.mv = 0.2;\n        this.mku = 6;\n        break;\n      case \"Food\":\n        this.dmd = 80;\n        this.dmdR = [70, 90];\n        this.cmp = 60;\n        this.cmpR = [35, 85];\n        this.bCost = 5000;\n        this.mv = 1;\n        this.mku = 3;\n        break;\n      case \"Plants\":\n        this.dmd = 70;\n        this.dmdR = [20, 90];\n        this.cmp = 50;\n        this.cmpR = [30, 70];\n        this.bCost = 3000;\n        this.mv = 0.6;\n        this.mku = 3.75;\n        break;\n      case \"Metal\":\n        this.dmd = 80;\n        this.dmdR = [75, 85];\n        this.cmp = 70;\n        this.cmpR = [60, 80];\n        this.bCost = 2650;\n        this.mv = 1;\n        this.mku = 6;\n        break;\n      case \"Hardware\":\n        this.dmd = 85;\n        this.dmdR = [80, 90];\n        this.cmp = 80;\n        this.cmpR = [65, 95];\n        this.bCost = 8e3;\n        this.mv = 0.5; //Less mv bc its processed twice\n        this.mku = 1;\n        break;\n      case \"Chemicals\":\n        this.dmd = 55;\n        this.dmdR = [40, 70];\n        this.cmp = 60;\n        this.cmpR = [40, 80];\n        this.bCost = 9e3;\n        this.mv = 1.2;\n        this.mku = 2;\n        break;\n      case \"Real Estate\":\n        this.dmd = 50;\n        this.dmdR = [5, 99];\n        this.cmp = 50;\n        this.cmpR = [25, 75];\n        this.bCost = 80e3;\n        this.mv = 1.5; //Less mv bc its processed twice\n        this.mku = 1.5;\n        break;\n      case \"Drugs\":\n        this.dmd = 60;\n        this.dmdR = [45, 75];\n        this.cmp = 70;\n        this.cmpR = [40, 99];\n        this.bCost = 40e3;\n        this.mv = 1.6;\n        this.mku = 1;\n        break;\n      case \"Robots\":\n        this.dmd = 90;\n        this.dmdR = [80, 99];\n        this.cmp = 90;\n        this.cmpR = [80, 99];\n        this.bCost = 75e3;\n        this.mv = 0.5; //Less mv bc its processed twice\n        this.mku = 1;\n        break;\n      case \"AI Cores\":\n        this.dmd = 90;\n        this.dmdR = [80, 99];\n        this.cmp = 90;\n        this.cmpR = [80, 99];\n        this.bCost = 15e3;\n        this.mv = 0.8; //Less mv bc its processed twice\n        this.mku = 0.5;\n        break;\n      case \"Scientific Research\":\n      case \"InitName\":\n        break;\n      default:\n        console.error(`Invalid material type in init(): ${this.name}`);\n        break;\n    }\n  }\n\n  // Process change in demand, competition, and buy cost of this material\n  processMarket(): void {\n    // The price will change in accordance with demand and competition.\n    // e.g. If demand goes up, then so does price. If competition goes up, price goes down\n    const priceVolatility: number = (Math.random() * this.mv) / 300;\n    const priceChange: number = 1 + priceVolatility;\n\n    //This 1st random check determines whether competition increases or decreases\n    const compVolatility: number = (Math.random() * this.mv) / 100;\n    const compChange: number = 1 + compVolatility;\n    if (Math.random() < 0.5) {\n      this.cmp *= compChange;\n      if (this.cmp > this.cmpR[1]) {\n        this.cmp = this.cmpR[1];\n      }\n      this.bCost *= 1 / priceChange; // Competition increases, so price goes down\n    } else {\n      this.cmp *= 1 / compChange;\n      if (this.cmp < this.cmpR[0]) {\n        this.cmp = this.cmpR[0];\n      }\n      this.bCost *= priceChange; // Competition decreases, so price goes up\n    }\n\n    // This 2nd random check determines whether demand increases or decreases\n    const dmdVolatility: number = (Math.random() * this.mv) / 100;\n    const dmdChange: number = 1 + dmdVolatility;\n    if (Math.random() < 0.5) {\n      this.dmd *= dmdChange;\n      if (this.dmd > this.dmdR[1]) {\n        this.dmd = this.dmdR[1];\n      }\n      this.bCost *= priceChange; // Demand increases, so price goes up\n    } else {\n      this.dmd *= 1 / dmdChange;\n      if (this.dmd < this.dmdR[0]) {\n        this.dmd = this.dmdR[0];\n      }\n      this.bCost *= 1 / priceChange;\n    }\n  }\n\n  // Serialize the current object to a JSON save state.\n  toJSON(): IReviverValue {\n    return Generic_toJSON(\"Material\", this);\n  }\n\n  // Initiatizes a Material object from a JSON save state.\n  static fromJSON(value: IReviverValue): Material {\n    return Generic_fromJSON(Material, value.data);\n  }\n}\n\nReviver.constructors.Material = Material;\n","import { Material } from \"./Material\";\nimport { ICorporation } from \"./ICorporation\";\nimport { IIndustry } from \"./IIndustry\";\nimport { MaterialSizes } from \"./MaterialSizes\";\nimport { IMap } from \"../types\";\nimport { Generic_fromJSON, Generic_toJSON, IReviverValue, Reviver } from \"../utils/JSONReviver\";\nimport { exceptionAlert } from \"../utils/helpers/exceptionAlert\";\n\ninterface IConstructorParams {\n  corp?: ICorporation;\n  industry?: IIndustry;\n  loc?: string;\n  size?: number;\n}\n\nexport class Warehouse {\n  // Warehouse's level, which affects its maximum size\n  level = 1;\n\n  // City that this Warehouse is in\n  loc: string;\n\n  // Map of Materials held by this Warehouse\n  materials: IMap<Material>;\n\n  // Maximum amount warehouse can hold\n  size: number;\n\n  // Amount of space currently used by warehouse\n  sizeUsed = 0;\n\n  // Whether Smart Supply is enabled for this Industry (the Industry that this Warehouse is for)\n  smartSupplyEnabled = false;\n\n  // Decide if smart supply should use the materials already in the warehouse when deciding on the amount to buy.\n  smartSupplyUseLeftovers: { [key: string]: boolean | undefined } = {};\n\n  // Stores the amount of product to be produced. Used for Smart Supply unlock.\n  // The production tracked by smart supply is always based on the previous cycle,\n  // so it will always trail the \"true\" production by 1 cycle\n  smartSupplyStore = 0;\n\n  constructor(params: IConstructorParams = {}) {\n    this.loc = params.loc ? params.loc : \"\";\n    this.size = params.size ? params.size : 0;\n\n    this.materials = {\n      Water: new Material({ name: \"Water\" }),\n      Energy: new Material({ name: \"Energy\" }),\n      Food: new Material({ name: \"Food\" }),\n      Plants: new Material({ name: \"Plants\" }),\n      Metal: new Material({ name: \"Metal\" }),\n      Hardware: new Material({ name: \"Hardware\" }),\n      Chemicals: new Material({ name: \"Chemicals\" }),\n      Drugs: new Material({ name: \"Drugs\" }),\n      Robots: new Material({ name: \"Robots\" }),\n      AICores: new Material({ name: \"AI Cores\" }),\n      RealEstate: new Material({ name: \"Real Estate\" }),\n    };\n\n    this.smartSupplyUseLeftovers = {\n      Water: true,\n      Energy: true,\n      Food: true,\n      Plants: true,\n      Metal: true,\n      Hardware: true,\n      Chemicals: true,\n      Drugs: true,\n      Robots: true,\n      AICores: true,\n      RealEstate: true,\n    };\n\n    if (params.corp && params.industry) {\n      this.updateSize(params.corp, params.industry);\n    }\n\n    // Default smart supply to being enabled if the upgrade is unlocked\n    if (params.corp?.unlockUpgrades[1]) {\n      this.smartSupplyEnabled = true;\n    }\n  }\n\n  // Re-calculate how much space is being used by this Warehouse\n  updateMaterialSizeUsed(): void {\n    this.sizeUsed = 0;\n    for (const matName of Object.keys(this.materials)) {\n      const mat = this.materials[matName];\n      if (MaterialSizes.hasOwnProperty(matName)) {\n        this.sizeUsed += mat.qty * MaterialSizes[matName];\n      }\n    }\n    if (this.sizeUsed > this.size) {\n      console.warn(\"Warehouse size used greater than capacity, something went wrong\");\n    }\n  }\n\n  updateSize(corporation: ICorporation, industry: IIndustry): void {\n    try {\n      this.size = this.level * 100 * corporation.getStorageMultiplier() * industry.getStorageMultiplier();\n    } catch (e: unknown) {\n      exceptionAlert(e);\n    }\n  }\n\n  // Serialize the current object to a JSON save state.\n  toJSON(): IReviverValue {\n    return Generic_toJSON(\"Warehouse\", this);\n  }\n\n  // Initiatizes a Warehouse object from a JSON save state.\n  static fromJSON(value: IReviverValue): Warehouse {\n    return Generic_fromJSON(Warehouse, value.data);\n  }\n}\n\nReviver.constructors.Warehouse = Warehouse;\n","import { AlertEvents } from \"./AlertManager\";\n\nimport React from \"react\";\nimport { SxProps } from \"@mui/system\";\nimport { Typography } from \"@mui/material\";\n\nexport function dialogBoxCreate(txt: string | JSX.Element, styles?: SxProps): void {\n  if (typeof txt !== \"string\") {\n    AlertEvents.emit(txt);\n  } else {\n    AlertEvents.emit(<Typography component=\"span\" sx={styles} dangerouslySetInnerHTML={{ __html: txt }} />);\n  }\n}\n","// The Research Map is an object that holds all Corporation Research objects\n// as values. They are identified by their names\nimport { Research, IConstructorParams } from \"./Research\";\nimport { researchMetadata } from \"./data/ResearchMetadata\";\nimport { IMap } from \"../types\";\n\nexport const ResearchMap: IMap<Research> = {};\n\nfunction addResearch(p: IConstructorParams): void {\n  if (ResearchMap[p.name] != null) {\n    console.warn(`Duplicate Research being defined: ${p.name}`);\n  }\n  ResearchMap[p.name] = new Research(p);\n}\n\nfor (const metadata of researchMetadata) {\n  addResearch(metadata);\n}\n","/**\n * Checks whether the value passed in can be considered a string.\n * @param value The value to check if it is a string.\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === \"string\" || value instanceof String;\n}\n","import { EmployeePositions } from \"./EmployeePositions\";\nimport { CorporationConstants } from \"./data/Constants\";\nimport { getRandomInt } from \"../utils/helpers/getRandomInt\";\nimport { generateRandomString } from \"../utils/StringHelperFunctions\";\nimport { Generic_fromJSON, Generic_toJSON, IReviverValue, Reviver } from \"../utils/JSONReviver\";\nimport { Employee } from \"./Employee\";\nimport { IIndustry } from \"./IIndustry\";\nimport { ICorporation } from \"./ICorporation\";\n\ninterface IParams {\n  loc?: string;\n  size?: number;\n}\n\nexport class OfficeSpace {\n  loc: string;\n  size: number;\n\n  minEne = 0;\n  minHap = 0;\n  minMor = 0;\n\n  maxEne = 100;\n  maxHap = 100;\n  maxMor = 100;\n\n  autoCoffee = false;\n  autoParty = false;\n  coffeeMult = 0;\n  partyMult = 0;\n  coffeeEmployees = 0;\n  partyEmployees = 0;\n\n  employees: Employee[] = [];\n  employeeProd: { [key: string]: number } = {\n    [EmployeePositions.Operations]: 0,\n    [EmployeePositions.Engineer]: 0,\n    [EmployeePositions.Business]: 0,\n    [EmployeePositions.Management]: 0,\n    [EmployeePositions.RandD]: 0,\n    total: 0,\n  };\n  employeeJobs: { [key: string]: number } = {\n    [EmployeePositions.Operations]: 0,\n    [EmployeePositions.Engineer]: 0,\n    [EmployeePositions.Business]: 0,\n    [EmployeePositions.Management]: 0,\n    [EmployeePositions.RandD]: 0,\n    [EmployeePositions.Training]: 0,\n    [EmployeePositions.Unassigned]: 0,\n  };\n  employeeNextJobs: { [key: string]: number } = {\n    [EmployeePositions.Operations]: 0,\n    [EmployeePositions.Engineer]: 0,\n    [EmployeePositions.Business]: 0,\n    [EmployeePositions.Management]: 0,\n    [EmployeePositions.RandD]: 0,\n    [EmployeePositions.Training]: 0,\n    [EmployeePositions.Unassigned]: 0,\n  };\n\n  constructor(params: IParams = {}) {\n    this.loc = params.loc ? params.loc : \"\";\n    this.size = params.size ? params.size : 1;\n  }\n\n  atCapacity(): boolean {\n    return this.employees.length >= this.size;\n  }\n\n  process(marketCycles = 1, corporation: ICorporation, industry: IIndustry): number {\n    // HRBuddy AutoRecruitment and training\n    if (industry.hasResearch(\"HRBuddy-Recruitment\") && !this.atCapacity()) {\n      const emp = this.hireRandomEmployee();\n      if (industry.hasResearch(\"HRBuddy-Training\") && emp !== undefined) {\n        emp.pos = EmployeePositions.Training;\n      }\n    }\n\n    // Update employee jobs and job counts\n    for (const employee of this.employees) {\n      employee.pos = employee.nextPos;\n    }\n    this.calculateTotalEmployees();\n    this.calculateNextEmployees();\n\n    // Process Office properties\n    this.maxEne = 100;\n    this.maxHap = 100;\n    this.maxMor = 100;\n\n    if (industry.hasResearch(\"Go-Juice\")) {\n      this.maxEne += 10;\n    }\n    if (industry.hasResearch(\"JoyWire\")) {\n      this.maxHap += 10;\n    }\n    if (industry.hasResearch(\"Sti.mu\")) {\n      this.maxMor += 10;\n    }\n    if (industry.hasResearch(\"AutoBrew\")) {\n      this.autoCoffee = true;\n    }\n    if (industry.hasResearch(\"AutoPartyManager\")) {\n      this.autoParty = true;\n    }\n\n    // Calculate changes in Morale/Happiness/Energy for Employees\n    let perfMult = 1; //Multiplier for employee morale/happiness/energy based on company performance\n    if (corporation.funds < 0 && industry.lastCycleRevenue < 0) {\n      perfMult = Math.pow(0.99, marketCycles);\n    } else if (corporation.funds > 0 && industry.lastCycleRevenue > 0) {\n      perfMult = Math.pow(1.01, marketCycles);\n    }\n\n    let totalSalary = 0;\n    for (const employee of this.employees) {\n      const salary = employee.process(marketCycles);\n      totalSalary += salary;\n\n      if (this.autoCoffee) {\n        employee.ene = this.maxEne;\n      } else if (this.coffeeMult > 1) {\n        const mult = 1 + ((this.coffeeMult - 1) * this.employees.length) / this.coffeeEmployees;\n        employee.ene *= mult;\n      } else {\n        employee.ene *= perfMult;\n      }\n\n      if (this.autoParty) {\n        employee.mor = this.maxMor;\n        employee.hap = this.maxHap;\n      } else if (this.partyMult > 1) {\n        const mult = 1 + ((this.partyMult - 1) * this.employees.length) / this.partyEmployees;\n        employee.mor *= mult;\n        employee.hap *= mult;\n      } else {\n        employee.mor *= perfMult;\n        employee.hap *= perfMult;\n      }\n\n      employee.ene = Math.max(Math.min(employee.ene, this.maxEne), this.minEne);\n      employee.mor = Math.max(Math.min(employee.mor, this.maxMor), this.minMor);\n      employee.hap = Math.max(Math.min(employee.hap, this.maxHap), this.minHap);\n    }\n\n    this.coffeeMult = 0;\n    this.partyMult = 0;\n    this.coffeeEmployees = 0;\n    this.partyEmployees = 0;\n\n    this.calculateEmployeeProductivity(corporation, industry);\n    return totalSalary;\n  }\n\n  calculateNextEmployees(): void {\n    //Reset\n    for (const name of Object.keys(this.employeeNextJobs)) {\n      this.employeeNextJobs[name] = 0;\n    }\n\n    for (let i = 0; i < this.employees.length; ++i) {\n      const employee = this.employees[i];\n      this.employeeNextJobs[employee.nextPos]++;\n    }\n  }\n\n  calculateTotalEmployees(): void {\n    //Reset\n    for (const name of Object.keys(this.employeeJobs)) {\n      this.employeeJobs[name] = 0;\n    }\n\n    for (let i = 0; i < this.employees.length; ++i) {\n      const employee = this.employees[i];\n      this.employeeJobs[employee.pos]++;\n    }\n  }\n\n  calculateEmployeeProductivity(corporation: ICorporation, industry: IIndustry): void {\n    //Reset\n    for (const name of Object.keys(this.employeeProd)) {\n      this.employeeProd[name] = 0;\n    }\n\n    let total = 0;\n    for (let i = 0; i < this.employees.length; ++i) {\n      const employee = this.employees[i];\n      const prod = employee.calculateProductivity(corporation, industry);\n      this.employeeProd[employee.pos] += prod;\n      total += prod;\n    }\n    this.employeeProd.total = total;\n  }\n\n  hireRandomEmployee(): Employee | undefined {\n    if (this.atCapacity()) return;\n    if (document.getElementById(\"cmpy-mgmt-hire-employee-popup\") != null) return;\n\n    //Generate three random employees (meh, decent, amazing)\n    const int = getRandomInt(50, 100),\n      cha = getRandomInt(50, 100),\n      exp = getRandomInt(50, 100),\n      cre = getRandomInt(50, 100),\n      eff = getRandomInt(50, 100),\n      sal = CorporationConstants.EmployeeSalaryMultiplier * (int + cha + exp + cre + eff);\n\n    const emp = new Employee({\n      intelligence: int,\n      charisma: cha,\n      experience: exp,\n      creativity: cre,\n      efficiency: eff,\n      salary: sal,\n    });\n\n    const name = generateRandomString(7);\n\n    for (let i = 0; i < this.employees.length; ++i) {\n      if (this.employees[i].name === name) {\n        return this.hireRandomEmployee();\n      }\n    }\n    emp.name = name;\n    this.employees.push(emp);\n\n    this.calculateTotalEmployees();\n    this.calculateNextEmployees();\n    return emp;\n  }\n\n  assignSingleJob(employee: Employee, job: string): void {\n    employee.nextPos = job;\n    this.calculateNextEmployees();\n  }\n\n  autoAssignJob(job: string, target: number): boolean {\n    let count = this.employeeNextJobs[job];\n\n    for (const employee of this.employees) {\n      if (count === target) {\n        break;\n      } else if (employee.nextPos === EmployeePositions.Unassigned && count <= target) {\n        employee.nextPos = job;\n        count++;\n      } else if (employee.nextPos === job && count >= target) {\n        employee.nextPos = EmployeePositions.Unassigned;\n        count--;\n      }\n    }\n\n    this.calculateNextEmployees();\n    return count === target;\n  }\n\n  getCoffeeCost(): number {\n    return 500e3 * this.employees.length;\n  }\n\n  setCoffee(mult = 1.05): boolean {\n    if (mult > 1 && this.coffeeMult === 0 && !this.autoCoffee && this.employees.length > 0) {\n      this.coffeeMult = mult;\n      this.coffeeEmployees = this.employees.length;\n      return true;\n    }\n\n    return false;\n  }\n\n  setParty(mult: number): boolean {\n    if (mult > 1 && this.partyMult === 0 && !this.autoParty && this.employees.length > 0) {\n      this.partyMult = mult;\n      this.partyEmployees = this.employees.length;\n      return true;\n    }\n\n    return false;\n  }\n\n  toJSON(): IReviverValue {\n    return Generic_toJSON(\"OfficeSpace\", this);\n  }\n\n  static fromJSON(value: IReviverValue): OfficeSpace {\n    return Generic_fromJSON(OfficeSpace, value.data);\n  }\n}\n\nReviver.constructors.OfficeSpace = OfficeSpace;\n","import { EmployeePositions } from \"./EmployeePositions\";\nimport { MaterialSizes } from \"./MaterialSizes\";\nimport { IIndustry } from \"./IIndustry\";\nimport { ProductRatingWeights, IProductRatingWeight } from \"./ProductRatingWeights\";\n\nimport { createCityMap } from \"../Locations/createCityMap\";\nimport { IMap } from \"../types\";\n\nimport { Generic_fromJSON, Generic_toJSON, IReviverValue, Reviver } from \"../utils/JSONReviver\";\nimport { getRandomInt } from \"../utils/helpers/getRandomInt\";\n\ninterface IConstructorParams {\n  name?: string;\n  demand?: number;\n  competition?: number;\n  markup?: number;\n  createCity?: string;\n  designCost?: number;\n  advCost?: number;\n  quality?: number;\n  performance?: number;\n  durability?: number;\n  reliability?: number;\n  aesthetics?: number;\n  features?: number;\n  loc?: string;\n  size?: number;\n  req?: IMap<number>;\n}\n\nexport class Product {\n  // Product name\n  name = \"\";\n\n  // The demand for this Product in the market. Gradually decreases\n  dmd = 0;\n\n  // How much competition there is in the market for this Product\n  cmp = 0;\n\n  // Markup. Affects how high of a price you can charge for this Product\n  // without suffering a loss in the # of sales\n  mku = 0;\n\n  // Production cost - estimation of how much money it costs to make this Product\n  pCost = 0;\n\n  // Sell cost\n  sCost: string | number = 0;\n\n  // Variables for handling the creation process of this Product\n  fin = false; // Whether this Product has finished being created\n  prog = 0; // Creation progress - A number betwee 0-100 representing percentage\n  createCity = \"\"; // City in which the product is/was being created\n  designCost = 0; // How much money was invested into designing this Product\n  advCost = 0; // How much money was invested into advertising this Product\n\n  // The average employee productivity and scientific research across the creation of the Product\n  creationProd: { [key: string]: number } = {\n    [EmployeePositions.Operations]: 0,\n    [EmployeePositions.Engineer]: 0,\n    [EmployeePositions.Business]: 0,\n    [EmployeePositions.Management]: 0,\n    [EmployeePositions.RandD]: 0,\n    total: 0,\n  };\n\n  // Aggregate score for this Product's 'rating'\n  // This is based on the stats/properties below. The weighting of the\n  // stats/properties below differs between different industries\n  rat = 0;\n\n  // Stats/properties of this Product\n  qlt = 0;\n  per = 0;\n  dur = 0;\n  rel = 0;\n  aes = 0;\n  fea = 0;\n\n  // Data refers to the production, sale, and quantity of the products\n  // These values are specific to a city\n  // For each city, the data is [qty, prod, sell]\n  data: IMap<number[]> = createCityMap<number[]>([0, 0, 0]);\n\n  // Location of this Product\n  // Only applies for location-based products like restaurants/hospitals\n  loc = \"\";\n\n  // How much space 1 unit of the Product takes (in the warehouse)\n  // Not applicable for all Products\n  siz = 0;\n\n  // Material requirements. An object that maps the name of a material to how much it requires\n  // to make 1 unit of the product.\n  reqMats: IMap<number> = {};\n\n  // Data to keep track of whether production/sale of this Product is\n  // manually limited. These values are specific to a city\n  //  [Whether production/sale is limited, limit amount]\n  prdman: IMap<any[]> = createCityMap<any[]>([false, 0]);\n  sllman: IMap<any[]> = createCityMap<any[]>([false, 0]);\n\n  // Flags that signal whether automatic sale pricing through Market TA is enabled\n  marketTa1 = false;\n  marketTa2 = false;\n  marketTa2Price: IMap<number> = createCityMap<number>(0);\n\n  // Determines the maximum amount of this product that can be sold in one market cycle\n  maxsll = 0;\n  constructor(params: IConstructorParams = {}) {\n    this.name = params.name ? params.name : \"\";\n    this.dmd = params.demand ? params.demand : 0;\n    this.cmp = params.competition ? params.competition : 0;\n    this.mku = params.markup ? params.markup : 0;\n    this.createCity = params.createCity ? params.createCity : \"\";\n    this.designCost = params.designCost ? params.designCost : 0;\n    this.advCost = params.advCost ? params.advCost : 0;\n    this.qlt = params.quality ? params.quality : 0;\n    this.per = params.performance ? params.performance : 0;\n    this.dur = params.durability ? params.durability : 0;\n    this.rel = params.reliability ? params.reliability : 0;\n    this.aes = params.aesthetics ? params.aesthetics : 0;\n    this.fea = params.features ? params.features : 0;\n    this.loc = params.loc ? params.loc : \"\";\n    this.siz = params.size ? params.size : 0;\n    this.reqMats = params.req ? params.req : {};\n  }\n\n  // Make progress on this product based on current employee productivity\n  createProduct(marketCycles: number, employeeProd: typeof this[\"creationProd\"]): void {\n    if (this.fin) {\n      return;\n    }\n\n    // Designing/Creating a Product is based mostly off Engineers\n    const opProd = employeeProd[EmployeePositions.Operations];\n    const engrProd = employeeProd[EmployeePositions.Engineer];\n    const mgmtProd = employeeProd[EmployeePositions.Management];\n    const total = opProd + engrProd + mgmtProd;\n    if (total <= 0) {\n      return;\n    }\n\n    // Management is a multiplier for the production from Engineers\n    const mgmtFactor = 1 + mgmtProd / (1.2 * total);\n    const prodMult = (Math.pow(engrProd, 0.34) + Math.pow(opProd, 0.2)) * mgmtFactor;\n    const progress = Math.min(marketCycles * 0.01 * prodMult, 100 - this.prog);\n    if (progress <= 0) {\n      return;\n    }\n\n    this.prog += progress;\n    for (const pos of Object.keys(employeeProd)) {\n      this.creationProd[pos] += (employeeProd[pos] * progress) / 100;\n    }\n  }\n\n  // @param industry - Industry object. Reference to industry that makes this Product\n  finishProduct(industry: IIndustry): void {\n    this.fin = true;\n\n    // Calculate properties\n    const totalProd = this.creationProd.total;\n    const engrRatio = this.creationProd[EmployeePositions.Engineer] / totalProd;\n    const mgmtRatio = this.creationProd[EmployeePositions.Management] / totalProd;\n    const rndRatio = this.creationProd[EmployeePositions.RandD] / totalProd;\n    const opsRatio = this.creationProd[EmployeePositions.Operations] / totalProd;\n    const busRatio = this.creationProd[EmployeePositions.Business] / totalProd;\n\n    const designMult = 1 + Math.pow(this.designCost, 0.1) / 100;\n    const balanceMult = 1.2 * engrRatio + 0.9 * mgmtRatio + 1.3 * rndRatio + 1.5 * opsRatio + busRatio;\n    const sciMult = 1 + Math.pow(industry.sciResearch.qty, industry.sciFac) / 800;\n    const totalMult = balanceMult * designMult * sciMult;\n\n    this.qlt =\n      totalMult *\n      (0.1 * this.creationProd[EmployeePositions.Engineer] +\n        0.05 * this.creationProd[EmployeePositions.Management] +\n        0.05 * this.creationProd[EmployeePositions.RandD] +\n        0.02 * this.creationProd[EmployeePositions.Operations] +\n        0.02 * this.creationProd[EmployeePositions.Business]);\n    this.per =\n      totalMult *\n      (0.15 * this.creationProd[EmployeePositions.Engineer] +\n        0.02 * this.creationProd[EmployeePositions.Management] +\n        0.02 * this.creationProd[EmployeePositions.RandD] +\n        0.02 * this.creationProd[EmployeePositions.Operations] +\n        0.02 * this.creationProd[EmployeePositions.Business]);\n    this.dur =\n      totalMult *\n      (0.05 * this.creationProd[EmployeePositions.Engineer] +\n        0.02 * this.creationProd[EmployeePositions.Management] +\n        0.08 * this.creationProd[EmployeePositions.RandD] +\n        0.05 * this.creationProd[EmployeePositions.Operations] +\n        0.05 * this.creationProd[EmployeePositions.Business]);\n    this.rel =\n      totalMult *\n      (0.02 * this.creationProd[EmployeePositions.Engineer] +\n        0.08 * this.creationProd[EmployeePositions.Management] +\n        0.02 * this.creationProd[EmployeePositions.RandD] +\n        0.05 * this.creationProd[EmployeePositions.Operations] +\n        0.08 * this.creationProd[EmployeePositions.Business]);\n    this.aes =\n      totalMult *\n      (0.0 * this.creationProd[EmployeePositions.Engineer] +\n        0.08 * this.creationProd[EmployeePositions.Management] +\n        0.05 * this.creationProd[EmployeePositions.RandD] +\n        0.02 * this.creationProd[EmployeePositions.Operations] +\n        0.1 * this.creationProd[EmployeePositions.Business]);\n    this.fea =\n      totalMult *\n      (0.08 * this.creationProd[EmployeePositions.Engineer] +\n        0.05 * this.creationProd[EmployeePositions.Management] +\n        0.02 * this.creationProd[EmployeePositions.RandD] +\n        0.05 * this.creationProd[EmployeePositions.Operations] +\n        0.05 * this.creationProd[EmployeePositions.Business]);\n    this.calculateRating(industry);\n    const advMult = 1 + Math.pow(this.advCost, 0.1) / 100;\n    const busmgtgRatio = Math.max(busRatio + mgmtRatio, 1 / totalProd);\n    this.mku = 100 / (advMult * Math.pow(this.qlt + 0.001, 0.65) * busmgtgRatio);\n\n    // I actually don't understand well enough to know if this is right.\n    // I'm adding this to prevent a crash.\n    if (this.mku === 0 || !isFinite(this.mku)) this.mku = 1;\n\n    this.dmd =\n      industry.awareness === 0 ? 20 : Math.min(100, advMult * (100 * (industry.popularity / industry.awareness)));\n    this.cmp = getRandomInt(0, 70);\n\n    //Calculate the product's required materials\n    //For now, just set it to be the same as the requirements to make materials\n    for (const matName of Object.keys(industry.reqMats)) {\n      if (industry.reqMats.hasOwnProperty(matName)) {\n        const reqMat = industry.reqMats[matName];\n        if (reqMat === undefined) continue;\n        this.reqMats[matName] = reqMat;\n      }\n    }\n\n    //Calculate the product's size\n    //For now, just set it to be the same size as the requirements to make materials\n    this.siz = 0;\n    for (const matName of Object.keys(industry.reqMats)) {\n      const reqMat = industry.reqMats[matName];\n      if (reqMat === undefined) continue;\n      this.siz += MaterialSizes[matName] * reqMat;\n    }\n  }\n\n  calculateRating(industry: IIndustry): void {\n    const weights: IProductRatingWeight = ProductRatingWeights[industry.type];\n    if (weights == null) {\n      console.error(`Could not find product rating weights for: ${industry}`);\n      return;\n    }\n    this.rat = 0;\n    this.rat += weights.Quality ? this.qlt * weights.Quality : 0;\n    this.rat += weights.Performance ? this.per * weights.Performance : 0;\n    this.rat += weights.Durability ? this.dur * weights.Durability : 0;\n    this.rat += weights.Reliability ? this.rel * weights.Reliability : 0;\n    this.rat += weights.Aesthetics ? this.aes * weights.Aesthetics : 0;\n    this.rat += weights.Features ? this.fea * weights.Features : 0;\n  }\n\n  // Serialize the current object to a JSON save state.\n  toJSON(): IReviverValue {\n    return Generic_toJSON(\"Product\", this);\n  }\n\n  // Initiatizes a Product object from a JSON save state.\n  static fromJSON(value: IReviverValue): Product {\n    return Generic_fromJSON(Product, value.data);\n  }\n}\n\nReviver.constructors.Product = Product;\n","/**\n * Utility function that creates a \"city map\", which is an object where\n * each city is a key (property).\n *\n * This map uses the official name of the city, NOT its key in the 'Cities' object\n */\nimport { Cities } from \"./Cities\";\nimport { IMap } from \"../types\";\n\nexport function createCityMap<T>(initValue: T): IMap<T> {\n  const map: IMap<T> = {};\n  const cities = Object.keys(Cities);\n  for (let i = 0; i < cities.length; ++i) {\n    map[cities[i]] = initValue;\n  }\n\n  // round try JSON so to make sure none of the initial values have the same references.\n  return JSON.parse(JSON.stringify(map));\n}\n","/**\n * Map of all Cities in the game\n * Key = City Name, Value = City object\n */\nimport { City } from \"./City\";\nimport { IMap } from \"../types\";\n\nexport const Cities: IMap<City> = {};\n","// Defines a \"Research Tree\"\n// Each Industry has a unique Research Tree\n// Each Node in the Research Trees only holds the name(s) of Research,\n// not an actual Research object. The name can be used to obtain a reference\n// to the corresponding Research object using the ResearchMap\nimport { Research } from \"./Research\";\nimport { ResearchMap } from \"./ResearchMap\";\n\nimport { IMap } from \"../types\";\n\ninterface IConstructorParams {\n  children?: Node[];\n  cost: number;\n  text: string;\n  parent?: Node | null;\n}\n\nexport class Node {\n  // All child Nodes in the tree\n  // The Research held in this Node is a prerequisite for all Research in\n  // child Nodes\n  children: Node[] = [];\n\n  // How much Scientific Research is needed for this\n  // Necessary to show it on the UI\n  cost = 0;\n\n  // Whether or not this Research has been unlocked\n  researched = false;\n\n  // Parent node in the tree\n  // The parent node defines the prerequisite Research (there can only be one)\n  // Set as null for no prerequisites\n  parent: Node | null = null;\n\n  // Name of the Research held in this Node\n  text = \"\";\n\n  constructor(p: IConstructorParams = { cost: 0, text: \"\" }) {\n    if (ResearchMap[p.text] == null) {\n      throw new Error(`Invalid Research name used when constructing ResearchTree Node: ${p.text}`);\n    }\n\n    this.text = p.text;\n    this.cost = p.cost;\n\n    if (p.children && p.children.length > 0) {\n      this.children = p.children;\n    }\n\n    if (p.parent != null) {\n      this.parent = p.parent;\n    }\n  }\n\n  addChild(n: Node): void {\n    this.children.push(n);\n    n.parent = this;\n  }\n\n  // Recursive function for finding a Node with the specified text\n  findNode(text: string): Node | null {\n    // Is this the Node?\n    if (this.text === text) {\n      return this;\n    }\n\n    // Recursively search chilren\n    let res = null;\n    for (let i = 0; i < this.children.length; ++i) {\n      res = this.children[i].findNode(text);\n      if (res != null) {\n        return res;\n      }\n    }\n\n    return null;\n  }\n\n  setParent(n: Node): void {\n    this.parent = n;\n  }\n}\n\n// A ResearchTree defines all available Research in an Industry\n// The root node in a Research Tree must always be the \"Hi-Tech R&D Laboratory\"\nexport class ResearchTree {\n  // Object containing names of all acquired Research by name\n  researched: IMap<boolean> = {};\n\n  // Root Node\n  root: Node | null = null;\n\n  // Gets an array with the 'text' values of ALL Nodes in the Research Tree\n  getAllNodes(): string[] {\n    const res: string[] = [];\n    const queue: Node[] = [];\n\n    if (this.root == null) {\n      return res;\n    }\n\n    queue.push(this.root);\n    while (queue.length !== 0) {\n      const node: Node | undefined = queue.shift();\n      if (node == null) {\n        continue;\n      }\n\n      res.push(node.text);\n      for (let i = 0; i < node.children.length; ++i) {\n        queue.push(node.children[i]);\n      }\n    }\n\n    return res;\n  }\n\n  // Get total multipliers from this Research Tree\n  getAdvertisingMultiplier(): number {\n    return this.getMultiplierHelper(\"advertisingMult\");\n  }\n\n  getEmployeeChaMultiplier(): number {\n    return this.getMultiplierHelper(\"employeeChaMult\");\n  }\n\n  getEmployeeCreMultiplier(): number {\n    return this.getMultiplierHelper(\"employeeCreMult\");\n  }\n\n  getEmployeeEffMultiplier(): number {\n    return this.getMultiplierHelper(\"employeeEffMult\");\n  }\n\n  getEmployeeIntMultiplier(): number {\n    return this.getMultiplierHelper(\"employeeIntMult\");\n  }\n\n  getProductionMultiplier(): number {\n    return this.getMultiplierHelper(\"productionMult\");\n  }\n\n  getProductProductionMultiplier(): number {\n    return this.getMultiplierHelper(\"productProductionMult\");\n  }\n\n  getSalesMultiplier(): number {\n    return this.getMultiplierHelper(\"salesMult\");\n  }\n\n  getScientificResearchMultiplier(): number {\n    return this.getMultiplierHelper(\"sciResearchMult\");\n  }\n\n  getStorageMultiplier(): number {\n    return this.getMultiplierHelper(\"storageMult\");\n  }\n\n  // Helper function for all the multiplier getter fns\n  getMultiplierHelper(propName: string): number {\n    let res = 1;\n    if (this.root == null) {\n      return res;\n    }\n\n    const queue: Node[] = [];\n    queue.push(this.root);\n    while (queue.length !== 0) {\n      const node: Node | undefined = queue.shift();\n\n      // If the Node has not been researched, there's no need to\n      // process it or its children\n      if (node == null || !node.researched) {\n        continue;\n      }\n\n      const research: Research | null = ResearchMap[node.text];\n\n      // Safety checks\n      if (research == null) {\n        console.warn(`Invalid Research name in node: ${node.text}`);\n        continue;\n      }\n\n      const mult =\n        {\n          advertisingMult: research.advertisingMult,\n          employeeChaMult: research.employeeChaMult,\n          employeeCreMult: research.employeeCreMult,\n          employeeEffMult: research.employeeEffMult,\n          employeeIntMult: research.employeeIntMult,\n          productionMult: research.productionMult,\n          productProductionMult: research.productProductionMult,\n          salesMult: research.salesMult,\n          sciResearchMult: research.sciResearchMult,\n          storageMult: research.storageMult,\n        }[propName] ?? null;\n\n      if (mult == null) {\n        console.warn(`Invalid propName specified in ResearchTree.getMultiplierHelper: ${propName}`);\n        continue;\n      }\n\n      res *= mult;\n      for (let i = 0; i < node.children.length; ++i) {\n        queue.push(node.children[i]);\n      }\n    }\n\n    return res;\n  }\n\n  // Search for a Node with the given name ('text' property on the Node)\n  // Returns 'null' if it cannot be found\n  findNode(name: string): Node | null {\n    if (this.root == null) {\n      return null;\n    }\n    return this.root.findNode(name);\n  }\n\n  // Marks a Node as researched\n  research(name: string): void {\n    if (this.root == null) {\n      return;\n    }\n\n    const queue: Node[] = [];\n    queue.push(this.root);\n    while (queue.length !== 0) {\n      const node: Node | undefined = queue.shift();\n      if (node == null) {\n        continue;\n      }\n\n      if (node.text === name) {\n        node.researched = true;\n        this.researched[name] = true;\n        return;\n      }\n\n      for (let i = 0; i < node.children.length; ++i) {\n        queue.push(node.children[i]);\n      }\n    }\n\n    console.warn(`ResearchTree.research() did not find the specified Research node for: ${name}`);\n  }\n\n  // Set the tree's Root Node\n  setRoot(root: Node): void {\n    this.root = root;\n  }\n}\n","import numeral from \"numeral\";\nimport \"numeral/locales/bg\";\nimport \"numeral/locales/cs\";\nimport \"numeral/locales/da-dk\";\nimport \"numeral/locales/de\";\nimport \"numeral/locales/en-au\";\nimport \"numeral/locales/en-gb\";\nimport \"numeral/locales/es\";\nimport \"numeral/locales/fr\";\nimport \"numeral/locales/hu\";\nimport \"numeral/locales/it\";\nimport \"numeral/locales/lv\";\nimport \"numeral/locales/no\";\nimport \"numeral/locales/pl\";\nimport \"numeral/locales/ru\";\n\nimport { Settings } from \"../Settings/Settings\";\n\nconst extraFormats = [1e15, 1e18, 1e21, 1e24, 1e27, 1e30];\nconst extraNotations = [\"q\", \"Q\", \"s\", \"S\", \"o\", \"n\"];\nconst gigaMultiplier = { standard: 1e9, iec60027_2: 2 ** 30 };\n\nclass NumeralFormatter {\n  // Default Locale\n  defaultLocale = \"en\";\n\n  constructor() {\n    this.defaultLocale = \"en\";\n  }\n\n  updateLocale(l: string): boolean {\n    if (numeral.locale(l) == null) {\n      console.warn(`Invalid locale for numeral: ${l}`);\n\n      numeral.locale(this.defaultLocale);\n      return false;\n    }\n    return true;\n  }\n\n  format(n: number, format: string): string {\n    // numeraljs doesnt properly format numbers that are too big or too small\n    if (Math.abs(n) < 1e-6) {\n      n = 0;\n    }\n    const answer = numeral(n).format(format);\n    if (answer === \"NaN\") {\n      return `${n}`;\n    }\n    return answer;\n  }\n\n  formatBigNumber(n: number): string {\n    return this.format(n, \"0.000a\");\n  }\n\n  // TODO: leverage numeral.js to do it. This function also implies you can\n  // use this format in some text field but you can't. ( \"1t\" will parse but\n  // \"1s\" will not)\n  formatReallyBigNumber(n: number, decimalPlaces = 3): string {\n    const nAbs = Math.abs(n);\n    if (n === Infinity) return \"∞\";\n    for (let i = 0; i < extraFormats.length; i++) {\n      if (extraFormats[i] < nAbs && nAbs <= extraFormats[i] * 1000) {\n        return this.format(n / extraFormats[i], \"0.\" + \"0\".repeat(decimalPlaces)) + extraNotations[i];\n      }\n    }\n    if (nAbs < 1000) {\n      return this.format(n, \"0.\" + \"0\".repeat(decimalPlaces));\n    }\n    const str = this.format(n, \"0.\" + \"0\".repeat(decimalPlaces) + \"a\");\n    if (str === \"NaNt\") return this.format(n, \"0.\" + \" \".repeat(decimalPlaces) + \"e+0\");\n    return str;\n  }\n\n  formatHp(n: number): string {\n    if (n < 1e6) {\n      return this.format(n, \"0,0\");\n    }\n    return this.formatReallyBigNumber(n);\n  }\n\n  formatMoney(n: number): string {\n    return \"$\" + this.formatReallyBigNumber(n);\n  }\n\n  formatSkill(n: number): string {\n    if (n < 1e15) {\n      return this.format(n, \"0,0\");\n    }\n    return this.formatReallyBigNumber(n);\n  }\n\n  formatExp(n: number): string {\n    return this.formatReallyBigNumber(n);\n  }\n\n  formatHashes(n: number): string {\n    return this.formatReallyBigNumber(n);\n  }\n\n  formatReputation(n: number): string {\n    return this.formatReallyBigNumber(n);\n  }\n\n  formatFavor(n: number): string {\n    return this.format(n, \"0,0\");\n  }\n\n  formatSecurity(n: number): string {\n    return n.toFixed(3);\n  }\n\n  formatRAM(n: number): string {\n    if (Settings.UseIEC60027_2) {\n      return this.format(n * gigaMultiplier.iec60027_2, \"0.00ib\");\n    }\n    return this.format(n * gigaMultiplier.standard, \"0.00b\");\n  }\n\n  formatPercentage(n: number, decimalPlaces = 2): string {\n    const formatter: string = \"0.\" + \"0\".repeat(decimalPlaces) + \"%\";\n    return this.format(n, formatter);\n  }\n\n  formatServerSecurity(n: number): string {\n    return this.format(n, \"0,0.000\");\n  }\n\n  formatRespect(n: number): string {\n    return this.formatReallyBigNumber(n, 5);\n  }\n\n  formatWanted(n: number): string {\n    return this.formatReallyBigNumber(n, 5);\n  }\n\n  formatMultiplier(n: number): string {\n    return this.format(n, \"0,0.00\");\n  }\n\n  formatSleeveShock(n: number): string {\n    return this.format(n, \"0,0.000\");\n  }\n\n  formatSleeveSynchro(n: number): string {\n    return this.format(n, \"0,0.000\");\n  }\n\n  formatSleeveMemory(n: number): string {\n    return this.format(n, \"0\");\n  }\n\n  formatPopulation(n: number): string {\n    return this.format(n, \"0.000a\");\n  }\n\n  formatStamina(n: number): string {\n    return this.format(n, \"0.0\");\n  }\n\n  formatShares(n: number): string {\n    if (n < 1000) {\n      return this.format(n, \"0\");\n    }\n    return this.formatReallyBigNumber(n);\n  }\n\n  formatInfiltrationSecurity(n: number): string {\n    return this.formatReallyBigNumber(n);\n  }\n\n  formatThreads(n: number): string {\n    return this.format(n, \"0,0\");\n  }\n\n  formatStaneksGiftHeat(n: number): string {\n    return this.format(n, \"0.000a\");\n  }\n\n  formatStaneksGiftCharge(n: number): string {\n    return this.format(n, \"0.000a\");\n  }\n\n  formatStaneksGiftPower(n: number): string {\n    return this.format(n, \"0.00\");\n  }\n\n  parseCustomLargeNumber(str: string): number {\n    const numericRegExp = new RegExp(\"^(-?\\\\d+\\\\.?\\\\d*)([\" + extraNotations.join(\"\") + \"]?)$\");\n    const match = str.match(numericRegExp);\n    if (match == null) {\n      return NaN;\n    }\n    const [, number, notation] = match;\n    const notationIndex = extraNotations.indexOf(notation);\n    if (notationIndex === -1) {\n      return NaN;\n    }\n    return parseFloat(number) * extraFormats[notationIndex];\n  }\n\n  largestAbsoluteNumber(n1: number, n2 = 0, n3 = 0): number {\n    if (isNaN(n1)) n1 = 0;\n    if (isNaN(n2)) n2 = 0;\n    if (isNaN(n3)) n3 = 0;\n    const largestAbsolute = Math.max(Math.abs(n1), Math.abs(n2), Math.abs(n3));\n    switch (largestAbsolute) {\n      case Math.abs(n1):\n        return n1;\n      case Math.abs(n2):\n        return n2;\n      case Math.abs(n3):\n        return n3;\n    }\n    return 0;\n  }\n\n  parseMoney(s: string): number {\n    // numeral library does not handle formats like 1s (returns 1) and 1e10 (returns 110) well,\n    // so if more then 1 return a valid number, return the one farthest from 0\n    const numeralValue = numeral(s).value();\n    const parsed = parseFloat(s);\n    const selfParsed = this.parseCustomLargeNumber(s);\n    // Check for one or more NaN values\n    if (isNaN(parsed) && isNaN(selfParsed)) {\n      if (numeralValue === null) {\n        // 3x NaN\n        return NaN;\n      }\n      // 2x NaN\n      return numeralValue;\n    } else if (numeralValue === null && isNaN(selfParsed)) {\n      // 2x NaN\n      return parsed;\n    } else if (isNaN(parsed)) {\n      if (numeralValue === null) {\n        // 2x NaN\n        return selfParsed;\n      }\n      // 1x NaN\n      return this.largestAbsoluteNumber(numeralValue, selfParsed);\n    } else if (numeralValue === null) {\n      // 1x NaN\n      return this.largestAbsoluteNumber(parsed, selfParsed);\n    } else if (isNaN(selfParsed)) {\n      // 1x NaN\n      return this.largestAbsoluteNumber(numeralValue, parsed);\n    } else {\n      // no NaN\n      return this.largestAbsoluteNumber(numeralValue, parsed, selfParsed);\n    }\n  }\n}\n\nexport const numeralWrapper = new NumeralFormatter();\n","// Enums that defined allowed values for setting configuration\n\n/**\n * Allowed values for the 'OwnedAugmentationsOrder' setting\n */\nexport enum PurchaseAugmentationsOrderSetting {\n  Cost,\n  Default,\n  Reputation,\n  Purchasable,\n}\n\n/**\n * Allowed values for the 'OwnedAugmentationsOrder' setting\n */\nexport enum OwnedAugmentationsOrderSetting {\n  Alphabetically,\n  AcquirementTime,\n}\n","import { IMap } from \"../types\";\nimport * as predefined from \"./data\";\n\nexport interface ITheme {\n  [key: string]: string | undefined;\n  primarylight: string;\n  primary: string;\n  primarydark: string;\n  successlight: string;\n  success: string;\n  successdark: string;\n  errorlight: string;\n  error: string;\n  errordark: string;\n  secondarylight: string;\n  secondary: string;\n  secondarydark: string;\n  warninglight: string;\n  warning: string;\n  warningdark: string;\n  infolight: string;\n  info: string;\n  infodark: string;\n  welllight: string;\n  well: string;\n  white: string;\n  black: string;\n  hp: string;\n  money: string;\n  hack: string;\n  combat: string;\n  cha: string;\n  int: string;\n  rep: string;\n  disabled: string;\n  backgroundprimary: string;\n  backgroundsecondary: string;\n  button: string;\n}\n\nexport interface IPredefinedTheme {\n  colors: ITheme;\n  name: string;\n  credit: string;\n  screenshot: string;\n  description: string;\n  reference?: string;\n}\n\nexport const defaultTheme: ITheme = {\n  ...predefined.Default.colors,\n};\n\nexport const getPredefinedThemes = (): IMap<IPredefinedTheme> => ({\n  ...predefined,\n});\n","export { Theme as Default } from \"./default\";\nexport { Theme as DefaultLite } from \"./default-lite\";\nexport { Theme as Monokai } from \"./monokai-ish\";\nexport { Theme as Warmer } from \"./warmer\";\nexport { Theme as DarkPlus } from \"./dark-plus\";\nexport { Theme as MayukaiDark } from \"./mayukai-dark\";\nexport { Theme as Purple } from \"./purple\";\nexport { Theme as SmoothGreen } from \"./smooth-green\";\nexport { Theme as Dracula } from \"./dracula\";\nexport { Theme as DarkBlue } from \"./dark-blue\";\nexport { Theme as DiscordLike } from \"./discord-like\";\nexport { Theme as OneDark } from \"./one-dark\";\nexport { Theme as MutedGoldBlue } from \"./muted-gold-blue\";\nexport { Theme as Light } from \"./light\";\n","import { IStyleSettings } from \"../ScriptEditor/NetscriptDefinitions\";\n\nexport const defaultStyles: IStyleSettings = {\n  lineHeight: 1.5,\n  fontFamily:\n    \"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\",\n};\n","import * as monaco from \"monaco-editor\";\nimport type { Monaco } from \"@monaco-editor/react\";\n\nexport interface IScriptEditorTheme {\n  base: \"vs\" | \"vs-dark\" | \"hc-black\";\n  inherit: boolean;\n  common: {\n    accent: string;\n    bg: string;\n    fg: string;\n  };\n  syntax: {\n    tag: string;\n    entity: string;\n    string: string;\n    regexp: string;\n    markup: string;\n    keyword: string;\n    comment: string;\n    constant: string;\n    error: string;\n  };\n  ui: {\n    line: string;\n    panel: {\n      bg: string;\n      selected: string;\n      border: string;\n    };\n    selection: {\n      bg: string;\n    };\n  };\n}\n\nexport const defaultMonacoTheme: IScriptEditorTheme = {\n  base: \"vs-dark\",\n  inherit: true,\n  common: {\n    accent: \"B5CEA8\",\n    bg: \"1E1E1E\",\n    fg: \"D4D4D4\",\n  },\n  syntax: {\n    tag: \"569CD6\",\n    entity: \"569CD6\",\n    string: \"CE9178\",\n    regexp: \"646695\",\n    markup: \"569CD6\",\n    keyword: \"569CD6\",\n    comment: \"6A9955\",\n    constant: \"569CD6\",\n    error: \"F44747\",\n  },\n  ui: {\n    line: \"1E1E1E\",\n    panel: {\n      bg: \"252526\",\n      selected: \"252526\",\n      border: \"1E1E1E\",\n    },\n    selection: {\n      bg: \"ADD6FF26\",\n    },\n  },\n};\n\n// Regex used for token color validation\n// https://github.com/microsoft/vscode/blob/973684056e67153952f495fce93bf50d0ec0b892/src/vs/editor/common/languages/supports/tokenization.ts#L153\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\n\n// Recursively sanitize the theme data to prevent errors\n// Invalid data will be replaced with FF0000 (bright red)\nexport const sanitizeTheme = (theme: IScriptEditorTheme): void => {\n  for (const [k, v] of Object.entries(theme)) {\n    switch (k) {\n      case \"base\":\n        if (![\"vs-dark\", \"vs\"].includes(theme.base)) theme.base = \"vs-dark\";\n        continue;\n      case \"inherit\":\n        if (typeof theme.inherit !== \"boolean\") theme.inherit = true;\n        continue;\n    }\n\n    const repairBlock = (block: { [key: string]: object | string }): void => {\n      for (const [k, v] of Object.entries(block)) {\n        if (typeof v === \"object\") {\n          repairBlock(v as { [key: string]: string });\n        } else if (!v.match(colorRegExp)) block[k] = \"FF0000\";\n      }\n    };\n    repairBlock(v);\n  }\n};\n\nexport function makeTheme(theme: IScriptEditorTheme): monaco.editor.IStandaloneThemeData {\n  const themeRules = [\n    {\n      token: \"\",\n      background: theme.ui.line,\n      foreground: theme.common.fg,\n    },\n    {\n      token: \"identifier\",\n      foreground: theme.common.accent,\n    },\n    {\n      token: \"keyword\",\n      foreground: theme.syntax.keyword,\n    },\n    {\n      token: \"string\",\n      foreground: theme.syntax.string,\n    },\n    {\n      token: \"string.escape\",\n      foreground: theme.syntax.regexp,\n    },\n    {\n      token: \"comment\",\n      foreground: theme.syntax.comment,\n    },\n    {\n      token: \"constant\",\n      foreground: theme.syntax.constant,\n    },\n    {\n      token: \"entity\",\n      foreground: theme.syntax.entity,\n    },\n    {\n      token: \"type\",\n      foreground: theme.syntax.tag,\n    },\n    {\n      token: \"tag\",\n      foreground: theme.syntax.tag,\n    },\n    {\n      token: \"regexp\",\n      foreground: theme.syntax.regexp,\n    },\n    {\n      token: \"attribute\",\n      foreground: theme.syntax.tag,\n    },\n    {\n      token: \"constructor\",\n      foreground: theme.syntax.markup,\n    },\n    {\n      token: \"invalid\",\n      foreground: theme.syntax.error,\n    },\n    {\n      token: \"number\",\n      foreground: theme.common.accent,\n    },\n    {\n      token: \"delimiter\",\n      foreground: theme.common.fg,\n    },\n    // Custom tokens\n    {\n      token: \"ns\",\n      foreground: theme.syntax.tag,\n    },\n    {\n      token: \"netscriptfunction\",\n      foreground: theme.syntax.markup,\n    },\n    {\n      token: \"otherkeywords\",\n      foreground: theme.syntax.keyword,\n    },\n    {\n      token: \"otherkeyvars\",\n      foreground: theme.common.accent,\n    },\n    {\n      token: \"this\",\n      foreground: theme.syntax.tag,\n    },\n  ];\n\n  const themeColors = Object.fromEntries(\n    [\n      [\"editor.background\", theme.common.bg],\n      [\"editor.foreground\", theme.common.fg],\n      [\"editor.lineHighlightBackground\", theme.ui.line],\n      [\"editor.selectionBackground\", theme.ui.selection.bg],\n\n      [\"editorSuggestWidget.background\", theme.ui.panel.bg],\n      [\"editorSuggestWidget.border\", theme.ui.panel.border],\n      [\"editorSuggestWidget.selectedBackground\", theme.ui.panel.selected],\n\n      [\"editorHoverWidget.background\", theme.ui.panel.bg],\n      [\"editorHoverWidget.border\", theme.ui.panel.border],\n\n      [\"editorWidget.background\", theme.ui.panel.bg],\n      [\"editorWidget.border\", theme.ui.panel.border],\n\n      [\"input.background\", theme.ui.panel.bg],\n      [\"input.border\", theme.ui.panel.border],\n    ].map(([k, v]) => [k, \"#\" + v]),\n  );\n\n  return { base: theme.base, inherit: theme.inherit, rules: themeRules, colors: themeColors };\n}\n\nexport async function loadThemes(monaco: Monaco): Promise<void> {\n  monaco.editor.defineTheme(\"monokai\", {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n      {\n        background: \"272822\",\n        token: \"\",\n      },\n      {\n        foreground: \"75715e\",\n        token: \"comment\",\n      },\n      {\n        foreground: \"e6db74\",\n        token: \"string\",\n      },\n      {\n        token: \"number\",\n        foreground: \"ae81ff\",\n      },\n      {\n        token: \"otherkeyvars\",\n        foreground: \"ae81ff\",\n      },\n      {\n        foreground: \"ae81ff\",\n        token: \"function\",\n      },\n      {\n        foreground: \"f92672\",\n        token: \"keyword\",\n      },\n      {\n        token: \"storage.type.function.js\",\n        foreground: \"ae81ff\",\n      },\n      {\n        token: \"ns\",\n        foreground: \"97d92b\",\n      },\n      {\n        token: \"netscriptfunction\",\n        foreground: \"53d3e4\",\n      },\n      {\n        token: \"otherkeywords\",\n        foreground: \"53d3e4\",\n      },\n      {\n        token: \"this\",\n        foreground: \"fd971f\",\n      },\n    ],\n    colors: {\n      \"editor.foreground\": \"#F8F8F2\",\n      \"editor.background\": \"#272822\",\n      \"editor.selectionBackground\": \"#49483E\",\n      \"editor.lineHighlightBackground\": \"#3E3D32\",\n      \"editorCursor.foreground\": \"#F8F8F0\",\n      \"editorWhitespace.foreground\": \"#3B3A32\",\n      \"editorIndentGuide.activeBackground\": \"#9D550FB0\",\n      \"editor.selectionHighlightBorder\": \"#222218\",\n    },\n  });\n\n  monaco.editor.defineTheme(\"solarized-dark\", {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n      {\n        background: \"002b36\",\n        token: \"\",\n      },\n      {\n        foreground: \"586e75\",\n        token: \"comment\",\n      },\n      {\n        foreground: \"00afaf\",\n        token: \"string\",\n      },\n      {\n        token: \"number\",\n        foreground: \"00afaf\",\n      },\n      {\n        token: \"otherkeyvars\",\n        foreground: \"268bd2\",\n      },\n      {\n        foreground: \"268bd2\",\n        token: \"function\",\n      },\n      {\n        foreground: \"859900\",\n        token: \"keyword\",\n      },\n      {\n        token: \"storage.type.function.js\",\n        foreground: \"cb4b16\",\n      },\n      {\n        token: \"ns\",\n        foreground: \"cb4b16\",\n      },\n      {\n        token: \"netscriptfunction\",\n        foreground: \"268bd2\",\n      },\n      {\n        token: \"otherkeywords\",\n        foreground: \"268bd2\",\n      },\n      {\n        token: \"type.identifier.js\",\n        foreground: \"b58900\",\n      },\n      {\n        token: \"delimiter.square.js\",\n        foreground: \"0087ff\",\n      },\n      {\n        token: \"delimiter.bracket.js\",\n        foreground: \"0087ff\",\n      },\n      {\n        token: \"this\",\n        foreground: \"cb4b16\",\n      },\n    ],\n    colors: {\n      \"editor.foreground\": \"#839496\",\n      \"editor.background\": \"#002b36\",\n      \"editor.selectionBackground\": \"#073642\",\n      \"editor.lineHighlightBackground\": \"#073642\",\n      \"editorCursor.foreground\": \"#819090\",\n      \"editorWhitespace.foreground\": \"#073642\",\n      \"editorIndentGuide.activeBackground\": \"#9D550FB0\",\n      \"editor.selectionHighlightBorder\": \"#222218\",\n    },\n  });\n\n  monaco.editor.defineTheme(\"solarized-light\", {\n    base: \"vs\",\n    inherit: true,\n    rules: [\n      {\n        foreground: \"657b83\",\n        background: \"fdf6e3\",\n        token: \"\",\n      },\n      {\n        foreground: \"586e75\",\n        token: \"comment\",\n      },\n      {\n        foreground: \"2aa198\",\n        token: \"string\",\n      },\n      {\n        token: \"number\",\n        foreground: \"2aa198\",\n      },\n      {\n        token: \"otherkeyvars\",\n        foreground: \"268bd2\",\n      },\n      {\n        foreground: \"268bd2\",\n        token: \"function\",\n      },\n      {\n        foreground: \"859900\",\n        token: \"keyword\",\n      },\n      {\n        token: \"storage.type.function.js\",\n        foreground: \"bc4b16\",\n      },\n      {\n        token: \"ns\",\n        foreground: \"cb4b16\",\n      },\n      {\n        token: \"netscriptfunction\",\n        foreground: \"268bd2\",\n      },\n      {\n        token: \"otherkeywords\",\n        foreground: \"268bd2\",\n      },\n      {\n        token: \"type.identifier.js\",\n        foreground: \"b58900\",\n      },\n      {\n        token: \"delimiter.square.js\",\n        foreground: \"0087ff\",\n      },\n      {\n        token: \"delimiter.bracket.js\",\n        foreground: \"0087ff\",\n      },\n      {\n        token: \"this\",\n        foreground: \"cb4b16\",\n      },\n    ],\n    colors: {\n      \"editor.foreground\": \"#657b83\",\n      \"editor.background\": \"#fdf6e3\",\n      \"editor.selectionBackground\": \"#eee8d5\",\n      \"editor.lineHighlightBackground\": \"#eee8d5\",\n      \"editorCursor.foreground\": \"#657b83\",\n      \"editorWhitespace.foreground\": \"#eee8d5\",\n      \"editorIndentGuide.activeBackground\": \"#eee8d5\",\n      \"editor.selectionHighlightBorder\": \"#073642\",\n    },\n  });\n\n  monaco.editor.defineTheme(\"dracula\", {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n      {\n        background: \"282A36\",\n        foreground: \"F8F8F2\",\n        token: \"\",\n      },\n      {\n        foreground: \"6272A4\",\n        token: \"comment\",\n      },\n      {\n        foreground: \"F1FA8C\",\n        token: \"string\",\n      },\n      {\n        token: \"number\",\n        foreground: \"BD93F9\",\n      },\n      {\n        token: \"otherkeyvars\",\n        foreground: \"BD93F9\",\n      },\n      {\n        foreground: \"FF79C6\",\n        token: \"function\",\n      },\n      {\n        foreground: \"FF79C6\",\n        token: \"keyword\",\n      },\n      {\n        token: \"storage.type.function.js\",\n        foreground: \"FF79C6\",\n      },\n      {\n        token: \"ns\",\n        foreground: \"FFB86C\",\n        fontStyle: \"italic\",\n      },\n\n      {\n        token: \"netscriptfunction\",\n        foreground: \"FF79C6\",\n      },\n      {\n        token: \"otherkeywords\",\n        foreground: \"FF68A7\",\n      },\n      {\n        token: \"type.identifier.js\",\n        foreground: \"7EE9FD\",\n        fontStyle: \"italic\",\n      },\n      {\n        token: \"delimiter.square.js\",\n        foreground: \"FFD709\",\n      },\n      {\n        token: \"delimiter.parenthesis.js\",\n        foreground: \"FFD709\",\n      },\n      {\n        token: \"delimiter.bracket.js\",\n        foreground: \"FFD709\",\n      },\n      {\n        token: \"this\",\n        foreground: \"BD93F9\",\n        fontStyle: \"italic\",\n      },\n    ],\n    colors: {\n      \"editor.foreground\": \"#F8F8F2\",\n      \"editor.background\": \"#282A36\",\n      \"editorLineNumber.foreground\": \"#6272A4\",\n      \"editor.selectionBackground\": \"#44475A\",\n      \"editor.selectionHighlightBackground\": \"#424450\",\n      \"editor.foldBackground\": \"#21222C\",\n      \"editor.wordHighlightBackground\": \"#8BE9FD50\",\n      \"editor.wordHighlightStrongBackground\": \"#50FA7B50\",\n      \"editor.findMatchBackground\": \"#FFB86C80\",\n      \"editor.findMatchHighlightBackground\": \"#FFFFFF40\",\n      \"editor.findRangeHighlightBackground\": \"#44475A75\",\n      \"editor.hoverHighlightBackground\": \"#8BE9FD50\",\n      \"editor.lineHighlightBorder\": \"#44475A\",\n      \"editor.rangeHighlightBackground\": \"#BD93F915\",\n      \"editor.snippetTabstopHighlightBackground\": \"#282A36\",\n      \"editor.snippetTabstopHighlightBorder\": \"#6272A4\",\n      \"editor.snippetFinalTabstopHighlightBackground\": \"#282A36\",\n      \"editor.snippetFinalTabstopHighlightBorder\": \"#50FA7B\",\n    },\n  });\n\n  monaco.editor.defineTheme(\"one-dark\", {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n      {\n        token: \"\",\n        background: \"333842\",\n        foreground: \"ABB2BF\",\n      },\n      {\n        token: \"comment\",\n        foreground: \"5C6370\",\n      },\n      {\n        token: \"string\",\n        foreground: \"98C379\",\n      },\n      {\n        token: \"number\",\n        foreground: \"D19A66\",\n      },\n      {\n        token: \"function\",\n        foreground: \"C678DD\",\n      },\n      {\n        token: \"keyword\",\n        foreground: \"C678DD\",\n      },\n      {\n        token: \"otherkeyvars\",\n        foreground: \"D19A66\",\n      },\n      {\n        token: \"otherkeywords\",\n        foreground: \"C678DD\",\n      },\n      {\n        token: \"ns\",\n        foreground: \"E06C75\",\n      },\n      {\n        token: \"netscriptfunction\",\n        foreground: \"61AFEF\",\n      },\n      {\n        token: \"type.identifier\",\n        foreground: \"E5C07B\",\n      },\n      {\n        token: \"delimiter\",\n        foreground: \"ABB2BF\",\n      },\n      {\n        token: \"this\",\n        foreground: \"E06C75\",\n      },\n    ],\n    colors: {\n      \"editor.background\": \"#282C34\",\n      \"editor.foreground\": \"#ABB2BF\",\n      \"editor.lineHighlightBackground\": \"#99BBFF0A\",\n      \"editor.selectionBackground\": \"#3E4451\",\n      \"editor.findMatchHighlightBackground\": \"#528BFF3D\",\n      \"editorCursor.foreground\": \"#528BFF\",\n      \"editorHoverWidget.background\": \"#21252B\",\n      \"editorHoverWidget.border\": \"#181A1F\",\n      \"editorIndentGuide.background\": \"#ABB2BF26\",\n      \"editorIndentGuide.activeBackground\": \"#626772\",\n      \"editorLineNumber.foreground\": \"#636D83\",\n      \"editorLineNumber.activeForeground\": \"#ABB2BF\",\n      \"editorSuggestWidget.background\": \"#21252B\",\n      \"editorSuggestWidget.border\": \"#181A1F\",\n      \"editorSuggestWidget.selectedBackground\": \"#2C313A\",\n      \"editorWhitespace.foreground\": \"#ABB2BF26\",\n      \"editorWidget.background\": \"#21252B\",\n      \"editorWidget.border\": \"#3A3F4B\",\n      \"input.background\": \"#1B1D23\",\n      \"input.border\": \"#181A1F\",\n      \"peekView.border\": \"#528BFF\",\n      \"peekViewResult.background\": \"#21252B\",\n      \"peekViewResult.selectionBackground\": \"#2C313A\",\n      \"peekViewTitle.background\": \"#1B1D23\",\n      \"peekViewEditor.background\": \"#1B1D23\",\n      \"scrollbarSlider.background\": \"#4E566680\",\n      \"scrollbarSlider.activeBackground\": \"#747D9180\",\n      \"scrollbarSlider.hoverBackground\": \"#5A637580\",\n    },\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport { EventEmitter } from \"../../utils/EventEmitter\";\nimport { Modal } from \"./Modal\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport { sha256 } from \"js-sha256\";\n\nexport const AlertEvents = new EventEmitter<[string | JSX.Element]>();\n\ninterface Alert {\n  id: string;\n  text: string | JSX.Element;\n  hash: string;\n}\n\nlet i = 0;\nexport function AlertManager(): React.ReactElement {\n  const [alerts, setAlerts] = useState<Alert[]>([]);\n  useEffect(\n    () =>\n      AlertEvents.subscribe((text: string | JSX.Element) => {\n        const id = i + \"\";\n        i++;\n        setAlerts((old) => {\n          const hash = getMessageHash(text);\n          if (old.some((a) => a.hash === hash)) {\n            return old;\n          }\n          return [\n            ...old,\n            {\n              id: id,\n              text: text,\n              hash: hash,\n            },\n          ];\n        });\n      }),\n    [],\n  );\n\n  useEffect(() => {\n    function handle(this: Document, event: KeyboardEvent): void {\n      if (event.code === \"Escape\") {\n        setAlerts([]);\n      }\n    }\n    document.addEventListener(\"keydown\", handle);\n    return () => document.removeEventListener(\"keydown\", handle);\n  }, []);\n\n  function getMessageHash(text: string | JSX.Element): string {\n    if (typeof text === \"string\") return sha256(text);\n    return sha256(JSON.stringify(text.props));\n  }\n\n  function close(): void {\n    setAlerts((old) => {\n      return old.slice(1, 1e99);\n    });\n  }\n\n  return (\n    <>\n      {alerts.length > 0 && (\n        <Modal open={true} onClose={close}>\n          <Box overflow=\"scroll\" sx={{ overflowWrap: \"break-word\", whiteSpace: \"pre-line\" }}>\n            <Typography component={\"span\"}>{alerts[0].text}</Typography>\n          </Box>\n        </Modal>\n      )}\n    </>\n  );\n}\n","import { IPlayer } from \"src/PersonObjects/IPlayer\";\nimport { MaterialSizes } from \"./MaterialSizes\";\nimport { ICorporation } from \"./ICorporation\";\nimport { IIndustry } from \"./IIndustry\";\nimport { IndustryStartingCosts, IndustryResearchTrees } from \"./IndustryData\";\nimport { Industry } from \"./Industry\";\nimport { CorporationConstants } from \"./data/Constants\";\nimport { OfficeSpace } from \"./OfficeSpace\";\nimport { Material } from \"./Material\";\nimport { Product } from \"./Product\";\nimport { Warehouse } from \"./Warehouse\";\nimport { CorporationUnlockUpgrade } from \"./data/CorporationUnlockUpgrades\";\nimport { CorporationUpgrade } from \"./data/CorporationUpgrades\";\nimport { Cities } from \"../Locations/Cities\";\nimport { EmployeePositions } from \"./EmployeePositions\";\nimport { ResearchMap } from \"./ResearchMap\";\nimport { isRelevantMaterial } from \"./ui/Helpers\";\n\nexport function NewIndustry(corporation: ICorporation, industry: string, name: string): void {\n  if (corporation.divisions.find(({ type }) => industry == type))\n    throw new Error(`You have already expanded into the ${industry} industry!`);\n\n  for (let i = 0; i < corporation.divisions.length; ++i) {\n    if (corporation.divisions[i].name === name) {\n      throw new Error(\"This division name is already in use!\");\n    }\n  }\n\n  const cost = IndustryStartingCosts[industry];\n  if (cost === undefined) {\n    throw new Error(`Invalid industry: '${industry}'`);\n  }\n  if (corporation.funds < cost) {\n    throw new Error(\"Not enough money to create a new division in this industry\");\n  } else if (name === \"\") {\n    throw new Error(\"New division must have a name!\");\n  } else {\n    corporation.funds = corporation.funds - cost;\n    corporation.divisions.push(\n      new Industry({\n        corp: corporation,\n        name: name,\n        type: industry,\n      }),\n    );\n  }\n}\n\nexport function NewCity(corporation: ICorporation, division: IIndustry, city: string): void {\n  if (corporation.funds < CorporationConstants.OfficeInitialCost) {\n    throw new Error(\"You don't have enough company funds to open a new office!\");\n  }\n  if (division.offices[city]) {\n    throw new Error(`You have already expanded into ${city} for ${division.name}`);\n  }\n  corporation.funds = corporation.funds - CorporationConstants.OfficeInitialCost;\n  division.offices[city] = new OfficeSpace({\n    loc: city,\n    size: CorporationConstants.OfficeInitialSize,\n  });\n}\n\nexport function UnlockUpgrade(corporation: ICorporation, upgrade: CorporationUnlockUpgrade): void {\n  if (corporation.funds < upgrade.price) {\n    throw new Error(\"Insufficient funds\");\n  }\n  if (corporation.unlockUpgrades[upgrade.index] === 1) {\n    throw new Error(`You have already unlocked the ${upgrade.name} upgrade!`);\n  }\n  corporation.unlock(upgrade);\n}\n\nexport function LevelUpgrade(corporation: ICorporation, upgrade: CorporationUpgrade): void {\n  const baseCost = upgrade.basePrice;\n  const priceMult = upgrade.priceMult;\n  const level = corporation.upgrades[upgrade.index];\n  const cost = baseCost * Math.pow(priceMult, level);\n  if (corporation.funds < cost) {\n    throw new Error(\"Insufficient funds\");\n  } else {\n    corporation.upgrade(upgrade);\n  }\n}\n\nexport function IssueDividends(corporation: ICorporation, rate: number): void {\n  if (isNaN(rate) || rate < 0 || rate > CorporationConstants.DividendMaxRate) {\n    throw new Error(`Invalid value. Must be an number between 0 and ${CorporationConstants.DividendMaxRate}`);\n  }\n\n  corporation.dividendRate = rate;\n}\n\nexport function SellMaterial(mat: Material, amt: string, price: string): void {\n  if (price === \"\") price = \"0\";\n  if (amt === \"\") amt = \"0\";\n  let cost = price.replace(/\\s+/g, \"\");\n  cost = cost.replace(/[^-()\\d/*+.MPe]/g, \"\"); //Sanitize cost\n  let temp = cost.replace(/MP/g, mat.bCost + \"\");\n  try {\n    temp = eval(temp);\n  } catch (e) {\n    throw new Error(\"Invalid value or expression for sell price field: \" + e);\n  }\n\n  if (temp == null || isNaN(parseFloat(temp)) || parseFloat(temp) < 0) {\n    throw new Error(\"Invalid value or expression for sell price field\");\n  }\n\n  if (cost.includes(\"MP\")) {\n    mat.sCost = cost; //Dynamically evaluated\n  } else {\n    mat.sCost = temp;\n  }\n\n  //Parse quantity\n  amt = amt.toUpperCase();\n  if (amt.includes(\"MAX\") || amt.includes(\"PROD\")) {\n    let q = amt.replace(/\\s+/g, \"\");\n    q = q.replace(/[^-()\\d/*+.MAXPROD]/g, \"\");\n    let tempQty = q.replace(/MAX/g, mat.maxsll.toString());\n    tempQty = tempQty.replace(/PROD/g, mat.prd.toString());\n    try {\n      tempQty = eval(tempQty);\n    } catch (e) {\n      throw new Error(\"Invalid value or expression for sell quantity field: \" + e);\n    }\n\n    if (tempQty == null || isNaN(parseFloat(tempQty)) || parseFloat(tempQty) < 0) {\n      throw new Error(\"Invalid value or expression for sell quantity field\");\n    }\n\n    mat.sllman[0] = true;\n    mat.sllman[1] = q; //Use sanitized input\n  } else if (isNaN(parseFloat(amt)) || parseFloat(amt) < 0) {\n    throw new Error(\"Invalid value for sell quantity field! Must be numeric or 'PROD' or 'MAX'\");\n  } else {\n    let q = parseFloat(amt);\n    if (isNaN(q)) {\n      q = 0;\n    }\n    if (q === 0) {\n      mat.sllman[0] = false;\n      mat.sllman[1] = 0;\n    } else {\n      mat.sllman[0] = true;\n      mat.sllman[1] = q;\n    }\n  }\n}\n\nexport function SellProduct(product: Product, city: string, amt: string, price: string, all: boolean): void {\n  //Parse price\n  if (price.includes(\"MP\")) {\n    //Dynamically evaluated quantity. First test to make sure its valid\n    //Sanitize input, then replace dynamic variables with arbitrary numbers\n    price = price.replace(/\\s+/g, \"\");\n    price = price.replace(/[^-()\\d/*+.MP]/g, \"\");\n    let temp = price.replace(/MP/g, \"1\");\n    try {\n      temp = eval(temp);\n    } catch (e) {\n      throw new Error(\"Invalid value or expression for sell price field: \" + e);\n    }\n    if (temp == null || isNaN(parseFloat(temp)) || parseFloat(temp) < 0) {\n      throw new Error(\"Invalid value or expression for sell price field.\");\n    }\n    product.sCost = price; //Use sanitized price\n  } else {\n    const cost = parseFloat(price);\n    if (isNaN(cost)) {\n      throw new Error(\"Invalid value for sell price field\");\n    }\n    product.sCost = cost;\n  }\n\n  // Array of all cities. Used later\n  const cities = Object.keys(Cities);\n\n  // Parse quantity\n  amt = amt.toUpperCase();\n  if (amt.includes(\"MAX\") || amt.includes(\"PROD\")) {\n    //Dynamically evaluated quantity. First test to make sure its valid\n    let qty = amt.replace(/\\s+/g, \"\");\n    qty = qty.replace(/[^-()\\d/*+.MAXPROD]/g, \"\");\n    let temp = qty.replace(/MAX/g, product.maxsll.toString());\n    temp = temp.replace(/PROD/g, product.data[city][1].toString());\n    try {\n      temp = eval(temp);\n    } catch (e) {\n      throw new Error(\"Invalid value or expression for sell quantity field: \" + e);\n    }\n\n    if (temp == null || isNaN(parseFloat(temp)) || parseFloat(temp) < 0) {\n      throw new Error(\"Invalid value or expression for sell quantity field\");\n    }\n    if (all) {\n      for (let i = 0; i < cities.length; ++i) {\n        const tempCity = cities[i];\n        product.sllman[tempCity][0] = true;\n        product.sllman[tempCity][1] = qty; //Use sanitized input\n      }\n    } else {\n      product.sllman[city][0] = true;\n      product.sllman[city][1] = qty; //Use sanitized input\n    }\n  } else if (isNaN(parseFloat(amt)) || parseFloat(amt) < 0) {\n    throw new Error(\"Invalid value for sell quantity field! Must be numeric or 'PROD' or 'MAX'\");\n  } else {\n    let qty = parseFloat(amt);\n    if (isNaN(qty)) {\n      qty = 0;\n    }\n    if (qty === 0) {\n      if (all) {\n        for (let i = 0; i < cities.length; ++i) {\n          const tempCity = cities[i];\n          product.sllman[tempCity][0] = false;\n          product.sllman[tempCity][1] = \"\";\n        }\n      } else {\n        product.sllman[city][0] = false;\n        product.sllman[city][1] = \"\";\n      }\n    } else if (all) {\n      for (let i = 0; i < cities.length; ++i) {\n        const tempCity = cities[i];\n        product.sllman[tempCity][0] = true;\n        product.sllman[tempCity][1] = qty;\n      }\n    } else {\n      product.sllman[city][0] = true;\n      product.sllman[city][1] = qty;\n    }\n  }\n}\n\nexport function SetSmartSupply(warehouse: Warehouse, smartSupply: boolean): void {\n  warehouse.smartSupplyEnabled = smartSupply;\n}\n\nexport function SetSmartSupplyUseLeftovers(warehouse: Warehouse, material: Material, useLeftover: boolean): void {\n  if (!Object.keys(warehouse.smartSupplyUseLeftovers).includes(material.name.replace(/ /g, \"\")))\n    throw new Error(`Invalid material '${material.name}'`);\n  warehouse.smartSupplyUseLeftovers[material.name.replace(/ /g, \"\")] = useLeftover;\n}\n\nexport function BuyMaterial(material: Material, amt: number): void {\n  if (isNaN(amt) || amt < 0) {\n    throw new Error(`Invalid amount '${amt}' to buy material '${material.name}'`);\n  }\n  material.buy = amt;\n}\n\nexport function BulkPurchase(corp: ICorporation, warehouse: Warehouse, material: Material, amt: number): void {\n  const matSize = MaterialSizes[material.name];\n  const maxAmount = (warehouse.size - warehouse.sizeUsed) / matSize;\n  if (isNaN(amt) || amt < 0) {\n    throw new Error(`Invalid input amount`);\n  }\n  if (amt > maxAmount) {\n    throw new Error(`You do not have enough warehouse size to fit this purchase`);\n  }\n  const cost = amt * material.bCost;\n  if (corp.funds >= cost) {\n    corp.funds = corp.funds - cost;\n    material.qty += amt;\n  } else {\n    throw new Error(`You cannot afford this purchase.`);\n  }\n}\n\nexport function SellShares(corporation: ICorporation, player: IPlayer, numShares: number): number {\n  if (isNaN(numShares)) throw new Error(\"Invalid value for number of shares\");\n  if (numShares < 0) throw new Error(\"Invalid value for number of shares\");\n  if (numShares > corporation.numShares) throw new Error(\"You don't have that many shares to sell!\");\n  if (!corporation.public) throw new Error(\"You haven't gone public!\");\n  if (corporation.shareSaleCooldown) throw new Error(\"Share sale on cooldown!\");\n  const stockSaleResults = corporation.calculateShareSale(numShares);\n  const profit = stockSaleResults[0];\n  const newSharePrice = stockSaleResults[1];\n  const newSharesUntilUpdate = stockSaleResults[2];\n\n  corporation.numShares -= numShares;\n  corporation.issuedShares += numShares;\n  corporation.sharePrice = newSharePrice;\n  corporation.shareSalesUntilPriceUpdate = newSharesUntilUpdate;\n  corporation.shareSaleCooldown = CorporationConstants.SellSharesCooldown;\n  player.gainMoney(profit, \"corporation\");\n  return profit;\n}\n\nexport function BuyBackShares(corporation: ICorporation, player: IPlayer, numShares: number): boolean {\n  if (isNaN(numShares)) throw new Error(\"Invalid value for number of shares\");\n  if (numShares < 0) throw new Error(\"Invalid value for number of shares\");\n  if (numShares > corporation.issuedShares) throw new Error(\"You don't have that many shares to buy!\");\n  if (!corporation.public) throw new Error(\"You haven't gone public!\");\n  const buybackPrice = corporation.sharePrice * 1.1;\n  if (player.money < numShares * buybackPrice) throw new Error(\"You cant afford that many shares!\");\n  corporation.numShares += numShares;\n  corporation.issuedShares -= numShares;\n  player.loseMoney(numShares * buybackPrice, \"corporation\");\n  return true;\n}\n\nexport function AssignJob(office: OfficeSpace, employeeName: string, job: string): void {\n  const employee = office.employees.find((e) => e.name === employeeName);\n\n  if (!employee) throw new Error(`Could not find employee '${name}'.`);\n  if (!Object.values(EmployeePositions).includes(job)) throw new Error(`'${job}' is not a valid job.`);\n\n  office.assignSingleJob(employee, job);\n}\n\nexport function AutoAssignJob(office: OfficeSpace, job: string, count: number): boolean {\n  if (!Object.values(EmployeePositions).includes(job)) throw new Error(`'${job}' is not a valid job.`);\n\n  return office.autoAssignJob(job, count);\n}\n\nexport function UpgradeOfficeSize(corp: ICorporation, office: OfficeSpace, size: number): void {\n  const initialPriceMult = Math.round(office.size / CorporationConstants.OfficeInitialSize);\n  const costMultiplier = 1.09;\n  // Calculate cost to upgrade size by 15 employees\n  let mult = 0;\n  for (let i = 0; i < size / CorporationConstants.OfficeInitialSize; ++i) {\n    mult += Math.pow(costMultiplier, initialPriceMult + i);\n  }\n  const cost = CorporationConstants.OfficeInitialCost * mult;\n  if (corp.funds < cost) return;\n  office.size += size;\n  corp.funds = corp.funds - cost;\n}\n\nexport function BuyCoffee(corp: ICorporation, office: OfficeSpace): boolean {\n  const cost = office.getCoffeeCost();\n  if (corp.funds < cost) {\n    return false;\n  }\n\n  if (!office.setCoffee()) {\n    return false;\n  }\n  corp.funds -= cost;\n\n  return true;\n}\n\nexport function ThrowParty(corp: ICorporation, office: OfficeSpace, costPerEmployee: number): number {\n  const mult = 1 + costPerEmployee / 10e6;\n  const cost = costPerEmployee * office.employees.length;\n  if (corp.funds < cost) {\n    return 0;\n  }\n\n  if (!office.setParty(mult)) {\n    return 0;\n  }\n  corp.funds -= cost;\n\n  return mult;\n}\n\nexport function PurchaseWarehouse(corp: ICorporation, division: IIndustry, city: string): void {\n  if (corp.funds < CorporationConstants.WarehouseInitialCost) return;\n  if (division.warehouses[city] instanceof Warehouse) return;\n  division.warehouses[city] = new Warehouse({\n    corp: corp,\n    industry: division,\n    loc: city,\n    size: CorporationConstants.WarehouseInitialSize,\n  });\n  corp.funds = corp.funds - CorporationConstants.WarehouseInitialCost;\n}\n\nexport function UpgradeWarehouseCost(warehouse: Warehouse, amt: number): number {\n  return Array.from(Array(amt).keys()).reduce(\n    (acc, index) => acc + CorporationConstants.WarehouseUpgradeBaseCost * Math.pow(1.07, warehouse.level + 1 + index),\n    0,\n  );\n}\n\nexport function UpgradeWarehouse(corp: ICorporation, division: IIndustry, warehouse: Warehouse, amt = 1): void {\n  const sizeUpgradeCost = UpgradeWarehouseCost(warehouse, amt);\n  if (corp.funds < sizeUpgradeCost) return;\n  warehouse.level += amt;\n  warehouse.updateSize(corp, division);\n  corp.funds = corp.funds - sizeUpgradeCost;\n}\n\nexport function HireAdVert(corp: ICorporation, division: IIndustry): void {\n  const cost = division.getAdVertCost();\n  if (corp.funds < cost) return;\n  corp.funds = corp.funds - cost;\n  division.applyAdVert(corp);\n}\n\nexport function MakeProduct(\n  corp: ICorporation,\n  division: IIndustry,\n  city: string,\n  productName: string,\n  designInvest: number,\n  marketingInvest: number,\n): void {\n  if (designInvest < 0) {\n    designInvest = 0;\n  }\n  if (marketingInvest < 0) {\n    marketingInvest = 0;\n  }\n  if (productName == null || productName === \"\") {\n    throw new Error(\"You must specify a name for your product!\");\n  }\n  if (!division.makesProducts) {\n    throw new Error(\"You cannot create products for this industry!\");\n  }\n  if (isNaN(designInvest)) {\n    throw new Error(\"Invalid value for design investment\");\n  }\n  if (isNaN(marketingInvest)) {\n    throw new Error(\"Invalid value for marketing investment\");\n  }\n  if (corp.funds < designInvest + marketingInvest) {\n    throw new Error(\"You don't have enough company funds to make this large of an investment\");\n  }\n  let maxProducts = 3;\n  if (division.hasResearch(\"uPgrade: Capacity.II\")) {\n    maxProducts = 5;\n  } else if (division.hasResearch(\"uPgrade: Capacity.I\")) {\n    maxProducts = 4;\n  }\n  const products = division.products;\n  if (Object.keys(products).length >= maxProducts) {\n    throw new Error(`You are already at the max products (${maxProducts}) for division: ${division.name}!`);\n  }\n\n  const product = new Product({\n    name: productName.replace(/[<>]/g, \"\").trim(), //Sanitize for HTMl elements\n    createCity: city,\n    designCost: designInvest,\n    advCost: marketingInvest,\n  });\n  if (products[product.name] instanceof Product) {\n    throw new Error(`You already have a product with this name!`);\n  }\n\n  corp.funds = corp.funds - (designInvest + marketingInvest);\n  products[product.name] = product;\n}\n\nexport function Research(division: IIndustry, researchName: string): void {\n  const researchTree = IndustryResearchTrees[division.type];\n  if (researchTree === undefined) throw new Error(`No research tree for industry '${division.type}'`);\n  const allResearch = researchTree.getAllNodes();\n  if (!allResearch.includes(researchName)) throw new Error(`No research named '${researchName}'`);\n  const research = ResearchMap[researchName];\n\n  if (division.researched[researchName]) return;\n  if (division.sciResearch.qty < research.cost)\n    throw new Error(`You do not have enough Scientific Research for ${research.name}`);\n  division.sciResearch.qty -= research.cost;\n\n  // Get the Node from the Research Tree and set its 'researched' property\n  researchTree.research(researchName);\n  division.researched[researchName] = true;\n}\n\nexport function ExportMaterial(\n  divisionName: string,\n  cityName: string,\n  material: Material,\n  amt: string,\n  division?: Industry,\n): void {\n  // Sanitize amt\n  let sanitizedAmt = amt.replace(/\\s+/g, \"\").toUpperCase();\n  sanitizedAmt = sanitizedAmt.replace(/[^-()\\d/*+.MAX]/g, \"\");\n  let temp = sanitizedAmt.replace(/MAX/g, \"1\");\n  try {\n    temp = eval(temp);\n  } catch (e) {\n    throw new Error(\"Invalid expression entered for export amount: \" + e);\n  }\n\n  const n = parseFloat(temp);\n\n  if (n == null || isNaN(n) || n < 0) {\n    throw new Error(\"Invalid amount entered for export\");\n  }\n\n  if (!division || !isRelevantMaterial(material.name, division)) {\n    throw new Error(`You cannot export material: ${material.name} to division: ${divisionName}!`);\n  }\n\n  const exportObj = { ind: divisionName, city: cityName, amt: sanitizedAmt };\n  material.exp.push(exportObj);\n}\n\nexport function CancelExportMaterial(divisionName: string, cityName: string, material: Material, amt: string): void {\n  for (let i = 0; i < material.exp.length; ++i) {\n    if (material.exp[i].ind !== divisionName || material.exp[i].city !== cityName || material.exp[i].amt !== amt)\n      continue;\n    material.exp.splice(i, 1);\n    break;\n  }\n}\n\nexport function LimitProductProduction(product: Product, cityName: string, qty: number): void {\n  if (qty < 0 || isNaN(qty)) {\n    product.prdman[cityName][0] = false;\n    product.prdman[cityName][1] = 0;\n  } else {\n    product.prdman[cityName][0] = true;\n    product.prdman[cityName][1] = qty;\n  }\n}\n\nexport function LimitMaterialProduction(material: Material, qty: number): void {\n  if (qty < 0 || isNaN(qty)) {\n    material.prdman[0] = false;\n    material.prdman[1] = 0;\n  } else {\n    material.prdman[0] = true;\n    material.prdman[1] = qty;\n  }\n}\n\nexport function SetMaterialMarketTA1(material: Material, on: boolean): void {\n  material.marketTa1 = on;\n}\n\nexport function SetMaterialMarketTA2(material: Material, on: boolean): void {\n  material.marketTa2 = on;\n}\n\nexport function SetProductMarketTA1(product: Product, on: boolean): void {\n  product.marketTa1 = on;\n}\n\nexport function SetProductMarketTA2(product: Product, on: boolean): void {\n  product.marketTa2 = on;\n}\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Default\",\n  description: \"Default game theme, most supported\",\n  credit: \"hydroflame\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#0f0\",\n    primary: \"#0c0\",\n    primarydark: \"#090\",\n    successlight: \"#0f0\",\n    success: \"#0c0\",\n    successdark: \"#090\",\n    errorlight: \"#f00\",\n    error: \"#c00\",\n    errordark: \"#900\",\n    secondarylight: \"#AAA\",\n    secondary: \"#888\",\n    secondarydark: \"#666\",\n    warninglight: \"#ff0\",\n    warning: \"#cc0\",\n    warningdark: \"#990\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#222\",\n    white: \"#fff\",\n    black: \"#000\",\n    hp: \"#dd3434\",\n    money: \"#ffd700\",\n    hack: \"#adff2f\",\n    combat: \"#faffdf\",\n    cha: \"#a671d1\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#000\",\n    backgroundsecondary: \"#000\",\n    button: \"#333\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Default-lite\",\n  description: \"Less eye-straining default theme\",\n  credit: \"NmuGmu\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/925263801564151888\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#28CF28\",\n    primary: \"#21A821\",\n    primarydark: \"#177317\",\n    successlight: \"#1CFF1C\",\n    success: \"#16CA16\",\n    successdark: \"#0D910D\",\n    errorlight: \"#FF3B3B\",\n    error: \"#C32D2D\",\n    errordark: \"#8E2121\",\n    secondarylight: \"#B3B3B3\",\n    secondary: \"#838383\",\n    secondarydark: \"#676767\",\n    warninglight: \"#FFFF3A\",\n    warning: \"#C3C32A\",\n    warningdark: \"#8C8C1E\",\n    infolight: \"#64CBFF\",\n    info: \"#3399CC\",\n    infodark: \"#246D91\",\n    welllight: \"#404040\",\n    well: \"#1C1C1C\",\n    white: \"#C3C3C3\",\n    black: \"#0A0B0B\",\n    hp: \"#C62E2E\",\n    money: \"#D6BB27\",\n    hack: \"#ADFF2F\",\n    combat: \"#E8EDCD\",\n    cha: \"#8B5FAF\",\n    int: \"#537CC8\",\n    rep: \"#E8EDCD\",\n    disabled: \"#5AB5A5\",\n    backgroundprimary: \"#0C0D0E\",\n    backgroundsecondary: \"#121415\",\n    button: \"#252829\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Monokai'ish\",\n  description: \"Monokai'ish\",\n  credit: \"eltea\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#FFF\",\n    primary: \"#F8F8F2\",\n    primarydark: \"#FAFAEB\",\n    successlight: \"#ADE146\",\n    success: \"#A6E22E\",\n    successdark: \"#98E104\",\n    errorlight: \"#FF69A0\",\n    error: \"#F92672\",\n    errordark: \"#D10F56\",\n    secondarylight: \"#AAA\",\n    secondary: \"#888\",\n    secondarydark: \"#666\",\n    warninglight: \"#E1D992\",\n    warning: \"#E6DB74\",\n    warningdark: \"#EDDD54\",\n    infolight: \"#92E1F1\",\n    info: \"#66D9EF\",\n    infodark: \"#31CDED\",\n    welllight: \"#444\",\n    well: \"#222\",\n    white: \"#fff\",\n    black: \"#000\",\n    hp: \"#F92672\",\n    money: \"#E6DB74\",\n    hack: \"#A6E22E\",\n    combat: \"#75715E\",\n    cha: \"#AE81FF\",\n    int: \"#66D9EF\",\n    rep: \"#E69F66\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#272822\",\n    backgroundsecondary: \"#1B1C18\",\n    button: \"#333\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Warmer\",\n  credit: \"hexnaught\",\n  description: \"Warmer, softer theme\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/921999581020028938\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#EA9062\",\n    primary: \"#DD7B4A\",\n    primarydark: \"#D3591C\",\n    successlight: \"#6ACF6A\",\n    success: \"#43BF43\",\n    successdark: \"#3E913E\",\n    errorlight: \"#C15757\",\n    error: \"#B34141\",\n    errordark: \"#752525\",\n    secondarylight: \"#AAA\",\n    secondary: \"#888\",\n    secondarydark: \"#666\",\n    warninglight: \"#E6E69D\",\n    warning: \"#DADA56\",\n    warningdark: \"#A1A106\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#222\",\n    white: \"#fff\",\n    black: \"#000\",\n    hp: \"#dd3434\",\n    money: \"#ffd700\",\n    hack: \"#adff2f\",\n    combat: \"#faffdf\",\n    cha: \"#AD84CF\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#76C6B7\",\n    backgroundprimary: \"#000\",\n    backgroundsecondary: \"#000\",\n    button: \"#333\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Dark+\",\n  credit: \"LoganMD\",\n  description: \"VSCode Dark+\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/921999975867617310\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#E0E0BC\",\n    primary: \"#CCCCAE\",\n    primarydark: \"#B8B89C\",\n    successlight: \"#00F000\",\n    success: \"#00D200\",\n    successdark: \"#00B400\",\n    errorlight: \"#F00000\",\n    error: \"#C80000\",\n    errordark: \"#A00000\",\n    secondarylight: \"#B4AEAE\",\n    secondary: \"#969090\",\n    secondarydark: \"#787272\",\n    warninglight: \"#F0F000\",\n    warning: \"#C8C800\",\n    warningdark: \"#A0A000\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#222\",\n    white: \"#fff\",\n    black: \"#1E1E1E\",\n    hp: \"#dd3434\",\n    money: \"#ffd700\",\n    hack: \"#adff2f\",\n    combat: \"#faffdf\",\n    cha: \"#a671d1\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#1E1E1E\",\n    backgroundsecondary: \"#252525\",\n    button: \"#333\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Mayukai Dark\",\n  description: \"Mayukai Dark-esque\",\n  credit: \"Festive Noire\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/922037502334889994\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#DDDFC5\",\n    primary: \"#CDCFB6\",\n    primarydark: \"#9D9F8C\",\n    successlight: \"#00EF00\",\n    success: \"#00A500\",\n    successdark: \"#007A00\",\n    errorlight: \"#F92672\",\n    error: \"#CA1C5C\",\n    errordark: \"#90274A\",\n    secondarylight: \"#AAA\",\n    secondary: \"#888\",\n    secondarydark: \"#666\",\n    warninglight: \"#D3D300\",\n    warning: \"#cc0\",\n    warningdark: \"#990\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#00010A\",\n    white: \"#fff\",\n    black: \"#020509\",\n    hp: \"#dd3434\",\n    money: \"#ffd700\",\n    hack: \"#8CCF27\",\n    combat: \"#faffdf\",\n    cha: \"#a671d1\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#080C11\",\n    backgroundsecondary: \"#03080F\",\n    button: \"#00010A\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Purple\",\n  credit: \"zer0ney\",\n  description: \"Essentially all defaults except for purple replacing the main colors\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/922091815849570395\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#BA55D3\",\n    primary: \"#9370DB\",\n    primarydark: \"#8A2BE2\",\n    successlight: \"#BA55D3\",\n    success: \"#9370DB\",\n    successdark: \"#8A2BE2\",\n    errorlight: \"#f00\",\n    error: \"#c00\",\n    errordark: \"#900\",\n    secondarylight: \"#AAA\",\n    secondary: \"#888\",\n    secondarydark: \"#666\",\n    warninglight: \"#ff0\",\n    warning: \"#cc0\",\n    warningdark: \"#990\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#222\",\n    white: \"#fff\",\n    black: \"#000\",\n    hp: \"#dd3434\",\n    money: \"#ffd700\",\n    hack: \"#adff2f\",\n    combat: \"#faffdf\",\n    cha: \"#a671d1\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#000\",\n    backgroundsecondary: \"#000\",\n    button: \"#333\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Smooth Green\",\n  description: \"A nice green theme that doesn't hurt your eyes.\",\n  credit: \"Swidt\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/922243957986033725\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#E0E0BC\",\n    primary: \"#B0D9A3\",\n    primarydark: \"#B8B89C\",\n    successlight: \"#00F000\",\n    success: \"#6BC16B\",\n    successdark: \"#00B400\",\n    errorlight: \"#F00000\",\n    error: \"#3D713D\",\n    errordark: \"#A00000\",\n    secondarylight: \"#B4AEAE\",\n    secondary: \"#8FAF85\",\n    secondarydark: \"#787272\",\n    warninglight: \"#F0F000\",\n    warning: \"#38F100\",\n    warningdark: \"#A0A000\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#2F3C2B\",\n    white: \"#fff\",\n    black: \"#1E1E1E\",\n    hp: \"#dd3434\",\n    money: \"#4AA52E\",\n    hack: \"#adff2f\",\n    combat: \"#faffdf\",\n    cha: \"#a671d1\",\n    int: \"#6495ed\",\n    rep: \"#35A135\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#1E1E1E\",\n    backgroundsecondary: \"#252525\",\n    button: \"#2F3C2B\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Dracula\",\n  description: \"Dracula Look-alike\",\n  credit: \"H3draut3r\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/922296307836678144\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#7082B8\",\n    primary: \"#F8F8F2\",\n    primarydark: \"#FF79C6\",\n    successlight: \"#0f0\",\n    success: \"#0c0\",\n    successdark: \"#090\",\n    errorlight: \"#FD4545\",\n    error: \"#FF2D2D\",\n    errordark: \"#C62424\",\n    secondarylight: \"#AAA\",\n    secondary: \"#8BE9FD\",\n    secondarydark: \"#666\",\n    warninglight: \"#FFC281\",\n    warning: \"#FFB86C\",\n    warningdark: \"#E6A055\",\n    infolight: \"#A0A0FF\",\n    info: \"#7070FF\",\n    infodark: \"#4040FF\",\n    welllight: \"#44475A\",\n    well: \"#363948\",\n    white: \"#fff\",\n    black: \"#282A36\",\n    hp: \"#D34448\",\n    money: \"#50FA7B\",\n    hack: \"#F1FA8C\",\n    combat: \"#BD93F9\",\n    cha: \"#FF79C6\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#282A36\",\n    backgroundsecondary: \"#21222C\",\n    button: \"#21222C\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Dark Blue\",\n  description: \"Very dark with a blue/purplelly primary\",\n  credit: \"Saynt_Garmo\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/923084732718264340\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#023DDE\",\n    primary: \"#4A41C8\",\n    primarydark: \"#005299\",\n    successlight: \"#00FF00\",\n    success: \"#D1DAD1\",\n    successdark: \"#BFCABF\",\n    errorlight: \"#f00\",\n    error: \"#c00\",\n    errordark: \"#900\",\n    secondarylight: \"#AAA\",\n    secondary: \"#888\",\n    secondarydark: \"#666\",\n    warninglight: \"#ff0\",\n    warning: \"#cc0\",\n    warningdark: \"#990\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#040505\",\n    white: \"#fff\",\n    black: \"#000000\",\n    hp: \"#dd3434\",\n    money: \"#ffd700\",\n    hack: \"#adff2f\",\n    combat: \"#faffdf\",\n    cha: \"#a671d1\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#091419\",\n    backgroundsecondary: \"#000000\",\n    button: \"#000000\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Discord-like\",\n  description: \"Discord inspired theme\",\n  credit: \"Thermite\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/924305252017143818\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#7389DC\",\n    primary: \"#7389DC\",\n    primarydark: \"#5964F1\",\n    successlight: \"#00CC00\",\n    success: \"#20DF20\",\n    successdark: \"#0CB80C\",\n    errorlight: \"#EA5558\",\n    error: \"#EC4145\",\n    errordark: \"#E82528\",\n    secondarylight: \"#C3C3C3\",\n    secondary: \"#9C9C9C\",\n    secondarydark: \"#4E4E4E\",\n    warninglight: \"#ff0\",\n    warning: \"#cc0\",\n    warningdark: \"#990\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#1C4FB3\",\n    welllight: \"#999999\",\n    well: \"#35383C\",\n    white: \"#FFFFFF\",\n    black: \"#202225\",\n    hp: \"#FF5656\",\n    money: \"#43FF43\",\n    hack: \"#FFAB3D\",\n    combat: \"#8A90FD\",\n    cha: \"#FF51D9\",\n    int: \"#6495ed\",\n    rep: \"#FFFF30\",\n    disabled: \"#474B51\",\n    backgroundprimary: \"#2F3136\",\n    backgroundsecondary: \"#35393E\",\n    button: \"#333\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"One Dark\",\n  description: \"Dark with a greenish tint\",\n  credit: \"Dexalt142\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/924650660694208512\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#98C379\",\n    primary: \"#98C379\",\n    primarydark: \"#98C379\",\n    successlight: \"#98C379\",\n    success: \"#98C379\",\n    successdark: \"#98C379\",\n    errorlight: \"#E06C75\",\n    error: \"#BE5046\",\n    errordark: \"#BE5046\",\n    secondarylight: \"#AAA\",\n    secondary: \"#888\",\n    secondarydark: \"#666\",\n    warninglight: \"#E5C07B\",\n    warning: \"#E5C07B\",\n    warningdark: \"#D19A66\",\n    infolight: \"#61AFEF\",\n    info: \"#61AFEF\",\n    infodark: \"#61AFEF\",\n    welllight: \"#4B5263\",\n    well: \"#282C34\",\n    white: \"#ABB2BF\",\n    black: \"#282C34\",\n    hp: \"#E06C75\",\n    money: \"#E5C07B\",\n    hack: \"#98C379\",\n    combat: \"#ABB2BF\",\n    cha: \"#C678DD\",\n    int: \"#61AFEF\",\n    rep: \"#ABB2BF\",\n    disabled: \"#56B6C2\",\n    backgroundprimary: \"#282C34\",\n    backgroundsecondary: \"#21252B\",\n    button: \"#4B5263\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Muted Gold & Blue\",\n  description: \"Muted gold with blue accents.\",\n  credit: \"Sloth\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/924672660758208563\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#E3B54A\",\n    primary: \"#CAA243\",\n    primarydark: \"#7E6937\",\n    successlight: \"#82FF82\",\n    success: \"#6FDA6F\",\n    successdark: \"#64C364\",\n    errorlight: \"#FD5555\",\n    error: \"#D84A4A\",\n    errordark: \"#AC3939\",\n    secondarylight: \"#D8D0B8\",\n    secondary: \"#B1AA95\",\n    secondarydark: \"#736E5E\",\n    warninglight: \"#ff0\",\n    warning: \"#cc0\",\n    warningdark: \"#990\",\n    infolight: \"#69f\",\n    info: \"#36c\",\n    infodark: \"#039\",\n    welllight: \"#444\",\n    well: \"#111111\",\n    white: \"#fff\",\n    black: \"#070300\",\n    hp: \"#dd3434\",\n    money: \"#ffd700\",\n    hack: \"#adff2f\",\n    combat: \"#faffdf\",\n    cha: \"#a671d1\",\n    int: \"#6495ed\",\n    rep: \"#faffdf\",\n    disabled: \"#66cfbc\",\n    backgroundprimary: \"#0A0A0E\",\n    backgroundsecondary: \"#0E0E10\",\n    button: \"#222222\",\n  },\n};\n","import { IPredefinedTheme } from \"../../Themes\";\nimport img1 from \"./screenshot.png\";\n\nexport const Theme: IPredefinedTheme = {\n  name: \"Light\",\n  description: \"Cobbled Together Light Theme\",\n  credit: \"matt\",\n  reference: \"https://discord.com/channels/415207508303544321/921991895230611466/926114005456658432\",\n  screenshot: img1,\n  colors: {\n    primarylight: \"#535353\",\n    primary: \"#1A1A1A\",\n    primarydark: \"#0d0d0d\",\n    successlight: \"#63c439\",\n    success: \"#428226\",\n    successdark: \"#2E5A1B\",\n    errorlight: \"#df7051\",\n    error: \"#C94824\",\n    errordark: \"#91341B\",\n    secondarylight: \"#b3b3b3\",\n    secondary: \"#9B9B9B\",\n    secondarydark: \"#7A7979\",\n    warninglight: \"#e8d464\",\n    warning: \"#C6AD20\",\n    warningdark: \"#9F8A16\",\n    infolight: \"#6299cf\",\n    info: \"#3778B7\",\n    infodark: \"#30689C\",\n    welllight: \"#f9f9f9\",\n    well: \"#eaeaea\",\n    white: \"#F7F7F7\",\n    black: \"#F7F7F7\",\n    hp: \"#BF5C41\",\n    money: \"#E1B121\",\n    hack: \"#47BC38\",\n    combat: \"#656262\",\n    cha: \"#A568AC\",\n    int: \"#889BCF\",\n    rep: \"#656262\",\n    disabled: \"#70B4BF\",\n    backgroundprimary: \"#F7F7F7\",\n    backgroundsecondary: \"#f9f9f9\",\n    button: \"#eaeaea\",\n  },\n};\n","export interface IConstructorParams {\n  name: string;\n  cost: number;\n  desc: string;\n  advertisingMult?: number;\n  employeeChaMult?: number;\n  employeeCreMult?: number;\n  employeeEffMult?: number;\n  employeeIntMult?: number;\n  productionMult?: number;\n  productProductionMult?: number;\n  salesMult?: number;\n  sciResearchMult?: number;\n  storageMult?: number;\n}\n\nexport class Research {\n  // Name of research. This will be used to identify researches in the Research Tree\n  name = \"\";\n\n  // How much scientific research it costs to unlock this\n  cost = 0;\n\n  // Description of what the Research does\n  desc = \"\";\n\n  // All possible generic upgrades for the company, in the form of multipliers\n  advertisingMult = 1;\n  employeeChaMult = 1;\n  employeeCreMult = 1;\n  employeeEffMult = 1;\n  employeeIntMult = 1;\n  productionMult = 1;\n  productProductionMult = 1;\n  salesMult = 1;\n  sciResearchMult = 1;\n  storageMult = 1;\n\n  constructor(p: IConstructorParams = { name: \"\", cost: 0, desc: \"\" }) {\n    this.name = p.name;\n    this.cost = p.cost;\n    this.desc = p.desc;\n    if (p.advertisingMult) {\n      this.advertisingMult = p.advertisingMult;\n    }\n    if (p.employeeChaMult) {\n      this.employeeChaMult = p.employeeChaMult;\n    }\n    if (p.employeeCreMult) {\n      this.employeeCreMult = p.employeeCreMult;\n    }\n    if (p.employeeEffMult) {\n      this.employeeEffMult = p.employeeEffMult;\n    }\n    if (p.employeeIntMult) {\n      this.employeeIntMult = p.employeeIntMult;\n    }\n    if (p.productionMult) {\n      this.productionMult = p.productionMult;\n    }\n    if (p.productProductionMult) {\n      this.productProductionMult = p.productProductionMult;\n    }\n    if (p.salesMult) {\n      this.salesMult = p.salesMult;\n    }\n    if (p.sciResearchMult) {\n      this.sciResearchMult = p.sciResearchMult;\n    }\n    if (p.storageMult) {\n      this.storageMult = p.storageMult;\n    }\n  }\n}\n","import { IConstructorParams } from \"../Research\";\n\nexport const researchMetadata: IConstructorParams[] = [\n  {\n    name: \"AutoBrew\",\n    cost: 12e3,\n    desc:\n      \"Automatically keep your employees fully caffeinated with \" +\n      \"coffee injections. This research will keep the energy of all \" +\n      \"employees at its maximum possible value, for no cost. \" +\n      \"This will also disable the Coffee upgrade.\",\n  },\n  {\n    name: \"AutoPartyManager\",\n    cost: 15e3,\n    desc:\n      \"Automatically analyzes your employees' happiness and morale \" +\n      \"and boosts them whenever it detects a decrease. This research will \" +\n      \"keep the morale and happiness of all employees at their maximum possible \" +\n      \"values, for no cost. \" +\n      \"This will also disable the 'Throw Party' feature.\",\n  },\n  {\n    name: \"Automatic Drug Administration\",\n    cost: 10e3,\n    desc:\n      \"Research how to automatically administer performance-enhacing drugs to all of \" +\n      \"your employees. This unlocks Drug-related Research.\",\n  },\n  {\n    name: \"Bulk Purchasing\",\n    cost: 5e3,\n    desc:\n      \"Research the art of buying materials in bulk. This allows you to purchase \" +\n      \"any amount of a material instantly.\",\n  },\n  {\n    name: \"CPH4 Injections\",\n    cost: 25e3,\n    desc:\n      \"Develop an advanced and harmless synthetic drug that is administered to \" +\n      \"employees to increase all of their stats, except experience, by 10%.\",\n    employeeCreMult: 1.1,\n    employeeChaMult: 1.1,\n    employeeEffMult: 1.1,\n    employeeIntMult: 1.1,\n  },\n  {\n    name: \"Drones\",\n    cost: 5e3,\n    desc:\n      \"Acquire the knowledge needed to create advanced drones. This research does nothing \" +\n      \"by itself, but unlocks other Drone-related research.\",\n  },\n  {\n    name: \"Drones - Assembly\",\n    cost: 25e3,\n    desc:\n      \"Manufacture and use Assembly Drones to improve the efficiency of \" +\n      \"your production lines. This increases all production by 20%.\",\n    productionMult: 1.2,\n  },\n  {\n    name: \"Drones - Transport\",\n    cost: 30e3,\n    desc:\n      \"Manufacture and use intelligent Transport Drones to optimize \" +\n      \"your warehouses. This increases the storage space of all warehouses \" +\n      \"by 50%.\",\n    storageMult: 1.5,\n  },\n  {\n    name: \"Go-Juice\",\n    cost: 25e3,\n    desc:\n      \"Provide employees with Go-Juice, a coffee-derivative that further enhances \" +\n      \"the brain's dopamine production. This increases the maximum energy of all \" +\n      \"employees by 10.\",\n  },\n  {\n    name: \"Hi-Tech R&D Laboratory\",\n    cost: 5e3,\n    desc:\n      \"Construct a cutting edge facility dedicated to advanced research and \" +\n      \"and development. This allows you to spend Scientific Research \" +\n      \"on powerful upgrades. It also globally increases Scientific Research \" +\n      \"production by 10%.\",\n    sciResearchMult: 1.1,\n  },\n  {\n    name: \"HRBuddy-Recruitment\",\n    cost: 15e3,\n    desc:\n      \"Use automated software to handle the hiring of employees. With this \" +\n      \"research, each office will automatically hire one employee per \" +\n      \"market cycle if there is available space.\",\n  },\n  {\n    name: \"HRBuddy-Training\",\n    cost: 20e3,\n    desc:\n      \"Use automated software to handle the training of employees. With this \" +\n      \"research, each employee hired with HRBuddy-Recruitment will automatically \" +\n      \"be assigned to 'Training', rather than being unassigned.\",\n  },\n  {\n    name: \"JoyWire\",\n    cost: 20e3,\n    desc: \"A brain implant which is installed in employees, increasing their maximum happiness by 10.\",\n  },\n  {\n    name: \"Market-TA.I\",\n    cost: 20e3,\n    desc:\n      \"Develop advanced AI software that uses technical analysis to \" +\n      \"help you understand and exploit the market. This research \" +\n      \"allows you to know what price to sell your Materials/Products \" +\n      \"at in order to avoid losing sales due to having too high of a mark-up. \" +\n      \"It also lets you automatically use that sale price.\",\n  },\n  {\n    name: \"Market-TA.II\",\n    cost: 50e3,\n    desc:\n      \"Develop double-advanced AI software that uses technical analysis to \" +\n      \"help you understand and exploit the market. This research \" +\n      \"allows you to know how many sales of a Material/Product you lose or gain \" +\n      \"from having too high or too low or a sale price. It also lets you automatically \" +\n      \"set the sale price of your Materials/Products at the optimal price such that \" +\n      \"the amount sold matches the amount produced.\",\n  },\n  {\n    name: \"Overclock\",\n    cost: 15e3,\n    desc:\n      \"Equip employees with a headset that uses transcranial direct current \" +\n      \"stimulation (tDCS) to increase the speed of their neurotransmitters. \" +\n      \"This research increases the intelligence and efficiency of all \" +\n      \"employees by 25%.\",\n    employeeEffMult: 1.25,\n    employeeIntMult: 1.25,\n  },\n  {\n    name: \"Self-Correcting Assemblers\",\n    cost: 25e3,\n    desc:\n      \"Create assemblers that can be used for universal production. \" +\n      \"These assemblers use deep learning to improve their efficiency \" +\n      \"at their tasks. This research increases all production by 10%\",\n    productionMult: 1.1,\n  },\n  {\n    name: \"Sti.mu\",\n    cost: 30e3,\n    desc:\n      \"Upgrade the tDCS headset to stimulate regions of the brain that \" +\n      \"control confidence and enthusiasm. This research increases the max \" +\n      \"morale of all employees by 10.\",\n  },\n  {\n    name: \"sudo.Assist\",\n    cost: 15e3,\n    desc: \"Develop a virtual assistant AI to handle and manage administrative issues for your corporation.\",\n  },\n  {\n    name: \"uPgrade: Capacity.I\",\n    cost: 20e3,\n    desc:\n      \"Expand the industry's capacity for designing and manufacturing its \" +\n      \"various products. This increases the industry's maximum number of products \" +\n      \"by 1 (from 3 to 4).\",\n  },\n  {\n    name: \"uPgrade: Capacity.II\",\n    cost: 30e3,\n    desc:\n      \"Expand the industry's capacity for designing and manufacturing its \" +\n      \"various products. This increases the industry's maximum number of products \" +\n      \"by 1 (from 4 to 5).\",\n  },\n  {\n    name: \"uPgrade: Dashboard\",\n    cost: 5e3,\n    desc:\n      \"Improve the software used to manage the industry's production line \" +\n      \"for its various products. This allows you to manage the production and \" +\n      \"sale of a product before it's finished being designed.\",\n  },\n  {\n    name: \"uPgrade: Fulcrum\",\n    cost: 10e3,\n    desc:\n      \"Streamline the manufacturing of this industry's various products. \" +\n      \"This research increases the production of your products by 5%\",\n    productProductionMult: 1.05,\n  },\n];\n","import { ISelfInitializer, ISelfLoading } from \"../types\";\nimport { OwnedAugmentationsOrderSetting, PurchaseAugmentationsOrderSetting } from \"./SettingEnums\";\nimport { defaultTheme, ITheme } from \"../Themes/Themes\";\nimport { defaultStyles } from \"../Themes/Styles\";\nimport { WordWrapOptions } from \"../ScriptEditor/ui/Options\";\nimport { OverviewSettings } from \"../ui/React/Overview\";\nimport { IStyleSettings } from \"../ScriptEditor/NetscriptDefinitions\";\nimport { defaultMonacoTheme, IScriptEditorTheme } from \"../ScriptEditor/ui/themes\";\n\n/**\n * Represents the default settings the player could customize.\n */\ninterface IDefaultSettings {\n  /**\n   * How many servers per page\n   */\n  ActiveScriptsServerPageSize: number;\n  /**\n   * How many scripts per page\n   */\n  ActiveScriptsScriptPageSize: number;\n  /**\n   * How often the game should autosave the player's progress, in seconds.\n   */\n  AutosaveInterval: number;\n\n  /**\n   * How many milliseconds between execution points for Netscript 1 statements.\n   */\n  CodeInstructionRunTime: number;\n\n  /**\n   * Render city as list of buttons.\n   */\n  DisableASCIIArt: boolean;\n\n  /**\n   * Whether global keyboard shortcuts should be recognized throughout the game.\n   */\n  DisableHotkeys: boolean;\n\n  /**\n   * Whether text effects such as corruption should be visible.\n   */\n  DisableTextEffects: boolean;\n\n  /**\n   * Whether overview progress bars should be visible.\n   */\n  DisableOverviewProgressBars: boolean;\n\n  /**\n   * Enable bash hotkeys\n   */\n  EnableBashHotkeys: boolean;\n\n  /**\n   * Timestamps format\n   */\n  TimestampsFormat: string;\n\n  /**\n   * Locale used for display numbers\n   */\n  Locale: string;\n\n  /**\n   * Limit the number of recently killed script entries being tracked.\n   */\n  MaxRecentScriptsCapacity: number;\n\n  /**\n   * Limit the number of log entries for each script being executed on each server.\n   */\n  MaxLogCapacity: number;\n\n  /**\n   * Limit how many entries can be written to a Netscript Port before entries start to get pushed out.\n   */\n  MaxPortCapacity: number;\n\n  /**\n   * Limit the number of entries in the terminal.\n   */\n  MaxTerminalCapacity: number;\n\n  /**\n   * Port the Remote File API client will try to connect to.\n   */\n  RemoteFileApiPort: number;\n\n  /**\n   * Save the game when you save any file.\n   */\n  SaveGameOnFileSave: boolean;\n\n  /**\n   * Whether the player should be asked to confirm purchasing each and every augmentation.\n   */\n  SuppressBuyAugmentationConfirmation: boolean;\n\n  /**\n   * Whether the user should be prompted to join each faction via a dialog box.\n   */\n  SuppressFactionInvites: boolean;\n\n  /**\n   * Whether the user should be shown a dialog box whenever they receive a new message file.\n   */\n  SuppressMessages: boolean;\n\n  /**\n   * Whether the user should be asked to confirm travelling between cities.\n   */\n  SuppressTravelConfirmation: boolean;\n\n  /**\n   * Whether the user should be displayed a popup message when his Bladeburner actions are cancelled.\n   */\n  SuppressBladeburnerPopup: boolean;\n\n  /**\n   * Whether the user should be displayed a popup message on stock market actions.\n   */\n  SuppressTIXPopup: boolean;\n\n  /**\n   * Whether the user should be displayed a toast alert when the game is saved.\n   */\n  SuppressSavedGameToast: boolean;\n\n  /**\n   * Whether the user should be displayed a toast warning when the autosave is disabled.\n   */\n  SuppressAutosaveDisabledWarnings: boolean;\n\n  /*\n   * Whether the game should skip saving the running scripts for late game\n   */\n  ExcludeRunningScriptsFromSave: boolean;\n\n  /*\n   * Theme colors\n   */\n  theme: ITheme;\n\n  /*\n   * Interface styles\n   */\n  styles: IStyleSettings;\n\n  /*\n   * Use GiB instead of GB\n   */\n  UseIEC60027_2: boolean;\n\n  /*\n   * Character overview settings\n   */\n  overview: OverviewSettings;\n\n  /**\n   *  If the game's sidebar is opened\n   */\n  IsSidebarOpened: boolean;\n\n  /**\n   *  Script editor theme data\n   */\n  EditorTheme: IScriptEditorTheme;\n}\n\n/**\n * Represents all possible settings the player wants to customize to their play style.\n */\ninterface ISettings extends IDefaultSettings {\n  /**\n   * What order the player's owned Augmentations/Source Files should be displayed in\n   */\n  OwnedAugmentationsOrder: OwnedAugmentationsOrderSetting;\n\n  /**\n   * What order the Augmentations should be displayed in when purchasing from a Faction\n   */\n  PurchaseAugmentationsOrder: PurchaseAugmentationsOrderSetting;\n\n  MonacoTheme: string;\n\n  MonacoInsertSpaces: boolean;\n\n  MonacoFontSize: number;\n\n  MonacoVim: boolean;\n\n  MonacoWordWrap: WordWrapOptions;\n}\n\nexport const defaultSettings: IDefaultSettings = {\n  ActiveScriptsServerPageSize: 10,\n  ActiveScriptsScriptPageSize: 10,\n  AutosaveInterval: 60,\n  CodeInstructionRunTime: 50,\n  DisableASCIIArt: false,\n  DisableHotkeys: false,\n  DisableTextEffects: false,\n  DisableOverviewProgressBars: false,\n  EnableBashHotkeys: false,\n  TimestampsFormat: \"\",\n  Locale: \"en\",\n  MaxRecentScriptsCapacity: 50,\n  MaxLogCapacity: 50,\n  MaxPortCapacity: 50,\n  MaxTerminalCapacity: 500,\n  RemoteFileApiPort: 0,\n  SaveGameOnFileSave: true,\n  SuppressBuyAugmentationConfirmation: false,\n  SuppressFactionInvites: false,\n  SuppressMessages: false,\n  SuppressTravelConfirmation: false,\n  SuppressBladeburnerPopup: false,\n  SuppressTIXPopup: false,\n  SuppressSavedGameToast: false,\n  SuppressAutosaveDisabledWarnings: false,\n  UseIEC60027_2: false,\n  ExcludeRunningScriptsFromSave: false,\n  IsSidebarOpened: true,\n\n  theme: defaultTheme,\n  styles: defaultStyles,\n  overview: { x: 0, y: 0, opened: true },\n\n  EditorTheme: defaultMonacoTheme,\n};\n\n/**\n * The current options the player has customized to their play style.\n */\n// tslint:disable-next-line:variable-name\nexport const Settings: ISettings & ISelfInitializer & ISelfLoading = {\n  ActiveScriptsServerPageSize: defaultSettings.ActiveScriptsServerPageSize,\n  ActiveScriptsScriptPageSize: defaultSettings.ActiveScriptsScriptPageSize,\n  AutosaveInterval: defaultSettings.AutosaveInterval,\n  CodeInstructionRunTime: 25,\n  DisableASCIIArt: defaultSettings.DisableASCIIArt,\n  DisableHotkeys: defaultSettings.DisableHotkeys,\n  DisableTextEffects: defaultSettings.DisableTextEffects,\n  DisableOverviewProgressBars: defaultSettings.DisableOverviewProgressBars,\n  EnableBashHotkeys: defaultSettings.EnableBashHotkeys,\n  TimestampsFormat: defaultSettings.TimestampsFormat,\n  Locale: \"en\",\n  MaxRecentScriptsCapacity: defaultSettings.MaxRecentScriptsCapacity,\n  MaxLogCapacity: defaultSettings.MaxLogCapacity,\n  MaxPortCapacity: defaultSettings.MaxPortCapacity,\n  MaxTerminalCapacity: defaultSettings.MaxTerminalCapacity,\n  OwnedAugmentationsOrder: OwnedAugmentationsOrderSetting.AcquirementTime,\n  PurchaseAugmentationsOrder: PurchaseAugmentationsOrderSetting.Default,\n  RemoteFileApiPort: defaultSettings.RemoteFileApiPort,\n  SaveGameOnFileSave: defaultSettings.SaveGameOnFileSave,\n  SuppressBuyAugmentationConfirmation: defaultSettings.SuppressBuyAugmentationConfirmation,\n  SuppressFactionInvites: defaultSettings.SuppressFactionInvites,\n  SuppressMessages: defaultSettings.SuppressMessages,\n  SuppressTravelConfirmation: defaultSettings.SuppressTravelConfirmation,\n  SuppressBladeburnerPopup: defaultSettings.SuppressBladeburnerPopup,\n  SuppressTIXPopup: defaultSettings.SuppressTIXPopup,\n  SuppressSavedGameToast: defaultSettings.SuppressSavedGameToast,\n  SuppressAutosaveDisabledWarnings: defaultSettings.SuppressAutosaveDisabledWarnings,\n  UseIEC60027_2: defaultSettings.UseIEC60027_2,\n  ExcludeRunningScriptsFromSave: defaultSettings.ExcludeRunningScriptsFromSave,\n  IsSidebarOpened: defaultSettings.IsSidebarOpened,\n\n  MonacoTheme: \"monokai\",\n  MonacoInsertSpaces: false,\n  MonacoFontSize: 20,\n  MonacoVim: false,\n  MonacoWordWrap: \"off\",\n\n  theme: { ...defaultTheme },\n  styles: { ...defaultStyles },\n  overview: defaultSettings.overview,\n  EditorTheme: { ...defaultMonacoTheme },\n  init() {\n    Object.assign(Settings, defaultSettings);\n  },\n  load(saveString: string) {\n    const save = JSON.parse(saveString);\n    Object.assign(Settings.theme, save.theme);\n    delete save.theme;\n    Object.assign(Settings.styles, save.styles);\n    delete save.styles;\n    Object.assign(Settings.overview, save.overview);\n    delete save.overview;\n    Object.assign(Settings.EditorTheme, save.EditorTheme);\n    delete save.EditorTheme;\n    Object.assign(Settings, save);\n  },\n};\n","export default \"dist/images/83b2443ab7e7d346766c8f6bc5afc7a7.png\";","export default \"dist/images/6caf35202b10b52e1fc2743f674c33e8.png\";","export default \"dist/images/cb88977ea837bccb9cceb727adc78302.png\";","export default \"dist/images/4e0e750f2f09de58219773edd46cbbf5.png\";","export default \"dist/images/e97de4daa946331c7e99dee9c05d629c.png\";","export default \"dist/images/9f96a5084f4e5f1a6c0041b41b34d62d.png\";","export default \"dist/images/85a7b2896acb62be76f3ea7100fe9012.png\";","export default \"dist/images/5aa87b7de67a77c914088783b055e1cf.png\";","export default \"dist/images/c7164b072d62c91c27c6d607b5207e7b.png\";","export default \"dist/images/66f4b86d86164fc117bd6d648e4eaa6f.png\";","export default \"dist/images/a1110d6c8d16a14c4570411750248399.png\";","export default \"dist/images/447bc31e61f55e7eff875be3e9a81f1a.png\";","export default \"dist/images/297df8c0e47764ea113951318b2acf55.png\";","export default \"dist/images/e66b0c327f97d08e4253f52234d659eb.png\";","import { Reviver, Generic_toJSON, Generic_fromJSON, IReviverValue } from \"../utils/JSONReviver\";\nimport { CityName } from \"../Locations/data/CityNames\";\nimport { Industries, IndustryStartingCosts, IndustryResearchTrees } from \"./IndustryData\";\nimport { CorporationConstants } from \"./data/Constants\";\nimport { EmployeePositions } from \"./EmployeePositions\";\nimport { Material } from \"./Material\";\nimport { getRandomInt } from \"../utils/helpers/getRandomInt\";\nimport { calculateEffectWithFactors } from \"../utils/calculateEffectWithFactors\";\nimport { OfficeSpace } from \"./OfficeSpace\";\nimport { Product } from \"./Product\";\nimport { dialogBoxCreate } from \"../ui/React/DialogBox\";\nimport { isString } from \"../utils/helpers/isString\";\nimport { MaterialSizes } from \"./MaterialSizes\";\nimport { Warehouse } from \"./Warehouse\";\nimport { ICorporation } from \"./ICorporation\";\nimport { IIndustry } from \"./IIndustry\";\n\ninterface IParams {\n  name?: string;\n  corp?: ICorporation;\n  type?: string;\n}\n\nexport class Industry implements IIndustry {\n  name = \"\";\n  type = Industries.Agriculture;\n  sciResearch = new Material({ name: \"Scientific Research\" });\n  researched: { [key: string]: boolean | undefined } = {};\n  reqMats: { [key: string]: number | undefined } = {};\n\n  //An array of the name of materials being produced\n  prodMats: string[] = [];\n\n  products: { [key: string]: Product | undefined } = {};\n  makesProducts = false;\n\n  awareness = 0;\n  popularity = 0; //Should always be less than awareness\n  startingCost = 0;\n\n  /* The following are factors for how much production/other things are increased by\n       different factors. The production increase always has diminishing returns,\n       and they are all reprsented by exponentials of < 1 (e.g x ^ 0.5, x ^ 0.8)\n       The number for these represent the exponential. A lower number means more\n       diminishing returns */\n  reFac = 0; //Real estate Factor\n  sciFac = 0; //Scientific Research Factor, affects quality\n  hwFac = 0; //Hardware factor\n  robFac = 0; //Robotics Factor\n  aiFac = 0; //AI Cores factor;\n  advFac = 0; //Advertising factor, affects sales\n\n  prodMult = 0; //Production multiplier\n\n  //Financials\n  lastCycleRevenue: number;\n  lastCycleExpenses: number;\n  thisCycleRevenue: number;\n  thisCycleExpenses: number;\n\n  state = \"START\";\n  newInd = true;\n\n  //Maps locations to warehouses. 0 if no warehouse at that location\n  warehouses: { [key: string]: Warehouse | 0 };\n\n  //Maps locations to offices. 0 if no office at that location\n  offices: { [key: string]: OfficeSpace | 0 } = {\n    [CityName.Aevum]: 0,\n    [CityName.Chongqing]: 0,\n    [CityName.Sector12]: new OfficeSpace({\n      loc: CityName.Sector12,\n      size: CorporationConstants.OfficeInitialSize,\n    }),\n    [CityName.NewTokyo]: 0,\n    [CityName.Ishima]: 0,\n    [CityName.Volhaven]: 0,\n  };\n\n  numAdVerts = 0;\n\n  constructor(params: IParams = {}) {\n    this.name = params.name ? params.name : \"\";\n    this.type = params.type ? params.type : Industries.Agriculture;\n\n    //Financials\n    this.lastCycleRevenue = 0;\n    this.lastCycleExpenses = 0;\n    this.thisCycleRevenue = 0;\n    this.thisCycleExpenses = 0;\n\n    this.warehouses = {\n      [CityName.Aevum]: 0,\n      [CityName.Chongqing]: 0,\n      [CityName.Sector12]: new Warehouse({\n        corp: params.corp,\n        industry: this,\n        loc: CityName.Sector12,\n        size: CorporationConstants.WarehouseInitialSize,\n      }),\n      [CityName.NewTokyo]: 0,\n      [CityName.Ishima]: 0,\n      [CityName.Volhaven]: 0,\n    };\n\n    this.init();\n  }\n\n  init(): void {\n    //Set the unique properties of an industry (how much its affected by real estate/scientific research, etc.)\n    const startingCost = IndustryStartingCosts[this.type];\n    if (startingCost === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.startingCost = startingCost;\n    switch (this.type) {\n      case Industries.Energy:\n        this.reFac = 0.65;\n        this.sciFac = 0.7;\n        this.robFac = 0.05;\n        this.aiFac = 0.3;\n        this.advFac = 0.08;\n        this.reqMats = {\n          Hardware: 0.1,\n          Metal: 0.2,\n        };\n        this.prodMats = [\"Energy\"];\n        break;\n      case Industries.Utilities:\n      case \"Utilities\":\n        this.reFac = 0.5;\n        this.sciFac = 0.6;\n        this.robFac = 0.4;\n        this.aiFac = 0.4;\n        this.advFac = 0.08;\n        this.reqMats = {\n          Hardware: 0.1,\n          Metal: 0.1,\n        };\n        this.prodMats = [\"Water\"];\n        break;\n      case Industries.Agriculture:\n        this.reFac = 0.72;\n        this.sciFac = 0.5;\n        this.hwFac = 0.2;\n        this.robFac = 0.3;\n        this.aiFac = 0.3;\n        this.advFac = 0.04;\n        this.reqMats = {\n          Water: 0.5,\n          Energy: 0.5,\n        };\n        this.prodMats = [\"Plants\", \"Food\"];\n        break;\n      case Industries.Fishing:\n        this.reFac = 0.15;\n        this.sciFac = 0.35;\n        this.hwFac = 0.35;\n        this.robFac = 0.5;\n        this.aiFac = 0.2;\n        this.advFac = 0.08;\n        this.reqMats = {\n          Energy: 0.5,\n        };\n        this.prodMats = [\"Food\"];\n        break;\n      case Industries.Mining:\n        this.reFac = 0.3;\n        this.sciFac = 0.26;\n        this.hwFac = 0.4;\n        this.robFac = 0.45;\n        this.aiFac = 0.45;\n        this.advFac = 0.06;\n        this.reqMats = {\n          Energy: 0.8,\n        };\n        this.prodMats = [\"Metal\"];\n        break;\n      case Industries.Food:\n        //reFac is unique for this bc it diminishes greatly per city. Handle this separately in code?\n        this.sciFac = 0.12;\n        this.hwFac = 0.15;\n        this.robFac = 0.3;\n        this.aiFac = 0.25;\n        this.advFac = 0.25;\n        this.reFac = 0.05;\n        this.reqMats = {\n          Food: 0.5,\n          Water: 0.5,\n          Energy: 0.2,\n        };\n        this.makesProducts = true;\n        break;\n      case Industries.Tobacco:\n        this.reFac = 0.15;\n        this.sciFac = 0.75;\n        this.hwFac = 0.15;\n        this.robFac = 0.2;\n        this.aiFac = 0.15;\n        this.advFac = 0.2;\n        this.reqMats = {\n          Plants: 1,\n          Water: 0.2,\n        };\n        this.makesProducts = true;\n        break;\n      case Industries.Chemical:\n        this.reFac = 0.25;\n        this.sciFac = 0.75;\n        this.hwFac = 0.2;\n        this.robFac = 0.25;\n        this.aiFac = 0.2;\n        this.advFac = 0.07;\n        this.reqMats = {\n          Plants: 1,\n          Energy: 0.5,\n          Water: 0.5,\n        };\n        this.prodMats = [\"Chemicals\"];\n        break;\n      case Industries.Pharmaceutical:\n        this.reFac = 0.05;\n        this.sciFac = 0.8;\n        this.hwFac = 0.15;\n        this.robFac = 0.25;\n        this.aiFac = 0.2;\n        this.advFac = 0.16;\n        this.reqMats = {\n          Chemicals: 2,\n          Energy: 1,\n          Water: 0.5,\n        };\n        this.prodMats = [\"Drugs\"];\n        this.makesProducts = true;\n        break;\n      case Industries.Computer:\n      case \"Computer\":\n        this.reFac = 0.2;\n        this.sciFac = 0.62;\n        this.robFac = 0.36;\n        this.aiFac = 0.19;\n        this.advFac = 0.17;\n        this.reqMats = {\n          Metal: 2,\n          Energy: 1,\n        };\n        this.prodMats = [\"Hardware\"];\n        this.makesProducts = true;\n        break;\n      case Industries.Robotics:\n        this.reFac = 0.32;\n        this.sciFac = 0.65;\n        this.aiFac = 0.36;\n        this.advFac = 0.18;\n        this.hwFac = 0.19;\n        this.reqMats = {\n          Hardware: 5,\n          Energy: 3,\n        };\n        this.prodMats = [\"Robots\"];\n        this.makesProducts = true;\n        break;\n      case Industries.Software:\n        this.sciFac = 0.62;\n        this.advFac = 0.16;\n        this.hwFac = 0.25;\n        this.reFac = 0.15;\n        this.aiFac = 0.18;\n        this.robFac = 0.05;\n        this.reqMats = {\n          Hardware: 0.5,\n          Energy: 0.5,\n        };\n        this.prodMats = [\"AICores\"];\n        this.makesProducts = true;\n        break;\n      case Industries.Healthcare:\n        this.reFac = 0.1;\n        this.sciFac = 0.75;\n        this.advFac = 0.11;\n        this.hwFac = 0.1;\n        this.robFac = 0.1;\n        this.aiFac = 0.1;\n        this.reqMats = {\n          Robots: 10,\n          AICores: 5,\n          Energy: 5,\n          Water: 5,\n        };\n        this.makesProducts = true;\n        break;\n      case Industries.RealEstate:\n        this.robFac = 0.6;\n        this.aiFac = 0.6;\n        this.advFac = 0.25;\n        this.sciFac = 0.05;\n        this.hwFac = 0.05;\n        this.reqMats = {\n          Metal: 5,\n          Energy: 5,\n          Water: 2,\n          Hardware: 4,\n        };\n        this.prodMats = [\"RealEstate\"];\n        this.makesProducts = true;\n        break;\n      default:\n        console.error(`Invalid Industry Type passed into Industry.init(): ${this.type}`);\n        return;\n    }\n  }\n\n  getProductDescriptionText(): string {\n    if (!this.makesProducts) return \"\";\n    switch (this.type) {\n      case Industries.Food:\n        return \"create and manage restaurants\";\n      case Industries.Tobacco:\n        return \"create tobacco and tobacco-related products\";\n      case Industries.Pharmaceutical:\n        return \"develop new pharmaceutical drugs\";\n      case Industries.Computer:\n      case \"Computer\":\n        return \"create new computer hardware and networking infrastructures\";\n      case Industries.Robotics:\n        return \"build specialized robots and robot-related products\";\n      case Industries.Software:\n        return \"develop computer software\";\n      case Industries.Healthcare:\n        return \"build and manage hospitals\";\n      case Industries.RealEstate:\n        return \"develop and manage real estate properties\";\n      default:\n        console.error(\"Invalid industry type in Industry.getProductDescriptionText\");\n        return \"\";\n    }\n  }\n\n  getMaximumNumberProducts(): number {\n    if (!this.makesProducts) return 0;\n\n    // Calculate additional number of allowed Products from Research/Upgrades\n    let additional = 0;\n    if (this.hasResearch(\"uPgrade: Capacity.I\")) ++additional;\n    if (this.hasResearch(\"uPgrade: Capacity.II\")) ++additional;\n\n    return CorporationConstants.BaseMaxProducts + additional;\n  }\n\n  hasMaximumNumberProducts(): boolean {\n    return Object.keys(this.products).length >= this.getMaximumNumberProducts();\n  }\n\n  //Calculates the values that factor into the production and properties of\n  //materials/products (such as quality, etc.)\n  calculateProductionFactors(): void {\n    let multSum = 0;\n    for (let i = 0; i < CorporationConstants.Cities.length; ++i) {\n      const city = CorporationConstants.Cities[i];\n      const warehouse = this.warehouses[city];\n      if (!(warehouse instanceof Warehouse)) {\n        continue;\n      }\n\n      const materials = warehouse.materials;\n\n      const cityMult =\n        Math.pow(0.002 * materials.RealEstate.qty + 1, this.reFac) *\n        Math.pow(0.002 * materials.Hardware.qty + 1, this.hwFac) *\n        Math.pow(0.002 * materials.Robots.qty + 1, this.robFac) *\n        Math.pow(0.002 * materials.AICores.qty + 1, this.aiFac);\n      multSum += Math.pow(cityMult, 0.73);\n    }\n\n    multSum < 1 ? (this.prodMult = 1) : (this.prodMult = multSum);\n  }\n\n  updateWarehouseSizeUsed(warehouse: Warehouse): void {\n    warehouse.updateMaterialSizeUsed();\n\n    for (const prodName of Object.keys(this.products)) {\n      if (this.products.hasOwnProperty(prodName)) {\n        const prod = this.products[prodName];\n        if (prod === undefined) continue;\n        warehouse.sizeUsed += prod.data[warehouse.loc][0] * prod.siz;\n      }\n    }\n  }\n\n  process(marketCycles = 1, state: string, corporation: ICorporation): void {\n    this.state = state;\n\n    //At the start of a cycle, store and reset revenue/expenses\n    //Then calculate salaries and processs the markets\n    if (state === \"START\") {\n      if (isNaN(this.thisCycleRevenue) || isNaN(this.thisCycleExpenses)) {\n        console.error(\"NaN in Corporation's computed revenue/expenses\");\n        dialogBoxCreate(\n          \"Something went wrong when compting Corporation's revenue/expenses. This is a bug. Please report to game developer\",\n        );\n        this.thisCycleRevenue = 0;\n        this.thisCycleExpenses = 0;\n      }\n      this.lastCycleRevenue = this.thisCycleRevenue / (marketCycles * CorporationConstants.SecsPerMarketCycle);\n      this.lastCycleExpenses = this.thisCycleExpenses / (marketCycles * CorporationConstants.SecsPerMarketCycle);\n      this.thisCycleRevenue = 0;\n      this.thisCycleExpenses = 0;\n\n      // Once you start making revenue, the player should no longer be\n      // considered new, and therefore no longer needs the 'tutorial' UI elements\n      if (this.lastCycleRevenue > 0) {\n        this.newInd = false;\n      }\n\n      // Process offices (and the employees in them)\n      let employeeSalary = 0;\n      for (const officeLoc of Object.keys(this.offices)) {\n        const office = this.offices[officeLoc];\n        if (office === 0) continue;\n        if (office instanceof OfficeSpace) {\n          employeeSalary += office.process(marketCycles, corporation, this);\n        }\n      }\n      this.thisCycleExpenses = this.thisCycleExpenses + employeeSalary;\n\n      // Process change in demand/competition of materials/products\n      this.processMaterialMarket();\n      this.processProductMarket(marketCycles);\n\n      // Process loss of popularity\n      this.popularity -= marketCycles * 0.0001;\n      this.popularity = Math.max(0, this.popularity);\n\n      // Process Dreamsense gains\n      const popularityGain = corporation.getDreamSenseGain(),\n        awarenessGain = popularityGain * 4;\n      if (popularityGain > 0) {\n        const awareness = this.awareness + awarenessGain * marketCycles;\n        this.awareness = Math.min(awareness, Number.MAX_VALUE);\n\n        const popularity = this.popularity + popularityGain * marketCycles;\n        this.popularity = Math.min(popularity, Number.MAX_VALUE);\n      }\n\n      return;\n    }\n\n    // Process production, purchase, and import/export of materials\n    let res = this.processMaterials(marketCycles, corporation);\n    if (Array.isArray(res)) {\n      this.thisCycleRevenue = this.thisCycleRevenue + res[0];\n      this.thisCycleExpenses = this.thisCycleExpenses + res[1];\n    }\n\n    // Process creation, production & sale of products\n    res = this.processProducts(marketCycles, corporation);\n    if (Array.isArray(res)) {\n      this.thisCycleRevenue = this.thisCycleRevenue + res[0];\n      this.thisCycleExpenses = this.thisCycleExpenses + res[1];\n    }\n  }\n\n  // Process change in demand and competition for this industry's materials\n  processMaterialMarket(): void {\n    //References to prodMats and reqMats\n    const reqMats = this.reqMats,\n      prodMats = this.prodMats;\n\n    //Only 'process the market' for materials that this industry deals with\n    for (let i = 0; i < CorporationConstants.Cities.length; ++i) {\n      //If this industry has a warehouse in this city, process the market\n      //for every material this industry requires or produces\n      if (this.warehouses[CorporationConstants.Cities[i]] instanceof Warehouse) {\n        const wh = this.warehouses[CorporationConstants.Cities[i]];\n        if (wh === 0) continue;\n        for (const name of Object.keys(reqMats)) {\n          if (reqMats.hasOwnProperty(name)) {\n            wh.materials[name].processMarket();\n          }\n        }\n\n        //Produced materials are stored in an array\n        for (let foo = 0; foo < prodMats.length; ++foo) {\n          wh.materials[prodMats[foo]].processMarket();\n        }\n\n        //Process these twice because these boost production\n        wh.materials[\"Hardware\"].processMarket();\n        wh.materials[\"Robots\"].processMarket();\n        wh.materials[\"AICores\"].processMarket();\n        wh.materials[\"RealEstate\"].processMarket();\n      }\n    }\n  }\n\n  // Process change in demand and competition for this industry's products\n  processProductMarket(marketCycles = 1): void {\n    // Demand gradually decreases, and competition gradually increases\n    for (const name of Object.keys(this.products)) {\n      if (this.products.hasOwnProperty(name)) {\n        const product = this.products[name];\n        if (product === undefined) continue;\n        let change = getRandomInt(0, 3) * 0.0004;\n        if (change === 0) continue;\n\n        if (\n          this.type === Industries.Pharmaceutical ||\n          this.type === Industries.Software ||\n          this.type === Industries.Robotics\n        ) {\n          change *= 3;\n        }\n        change *= marketCycles;\n        product.dmd -= change;\n        product.cmp += change;\n        product.cmp = Math.min(product.cmp, 99.99);\n        product.dmd = Math.max(product.dmd, 0.001);\n      }\n    }\n  }\n\n  //Process production, purchase, and import/export of materials\n  processMaterials(marketCycles = 1, corporation: ICorporation): [number, number] {\n    let revenue = 0,\n      expenses = 0;\n    this.calculateProductionFactors();\n\n    //At the start of the export state, set the imports of everything to 0\n    if (this.state === \"EXPORT\") {\n      for (let i = 0; i < CorporationConstants.Cities.length; ++i) {\n        const city = CorporationConstants.Cities[i];\n        if (!(this.warehouses[city] instanceof Warehouse)) {\n          continue;\n        }\n        const warehouse = this.warehouses[city];\n        if (warehouse === 0) continue;\n        for (const matName of Object.keys(warehouse.materials)) {\n          if (warehouse.materials.hasOwnProperty(matName)) {\n            const mat = warehouse.materials[matName];\n            mat.imp = 0;\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < CorporationConstants.Cities.length; ++i) {\n      const city = CorporationConstants.Cities[i];\n      const office = this.offices[city];\n      if (office === 0) continue;\n\n      if (this.warehouses[city] instanceof Warehouse) {\n        const warehouse = this.warehouses[city];\n        if (warehouse === 0) continue;\n\n        switch (this.state) {\n          case \"PURCHASE\": {\n            /* Process purchase of materials */\n            for (const matName of Object.keys(warehouse.materials)) {\n              if (!warehouse.materials.hasOwnProperty(matName)) continue;\n              const mat = warehouse.materials[matName];\n              let buyAmt = 0;\n              let maxAmt = 0;\n              if (warehouse.smartSupplyEnabled && Object.keys(this.reqMats).includes(matName)) {\n                continue;\n              }\n              buyAmt = mat.buy * CorporationConstants.SecsPerMarketCycle * marketCycles;\n\n              maxAmt = Math.floor((warehouse.size - warehouse.sizeUsed) / MaterialSizes[matName]);\n\n              buyAmt = Math.min(buyAmt, maxAmt);\n              if (buyAmt > 0) {\n                mat.qty += buyAmt;\n                expenses += buyAmt * mat.bCost;\n              }\n              this.updateWarehouseSizeUsed(warehouse);\n            } //End process purchase of materials\n\n            // smart supply\n            const smartBuy: { [key: string]: number | undefined } = {};\n            for (const matName of Object.keys(warehouse.materials)) {\n              if (!warehouse.materials.hasOwnProperty(matName)) continue;\n              if (!warehouse.smartSupplyEnabled || !Object.keys(this.reqMats).includes(matName)) continue;\n              const mat = warehouse.materials[matName];\n\n              //Smart supply tracker is stored as per second rate\n              const reqMat = this.reqMats[matName];\n              if (reqMat === undefined) throw new Error(`reqMat \"${matName}\" is undefined`);\n              mat.buy = reqMat * warehouse.smartSupplyStore;\n              let buyAmt = mat.buy * CorporationConstants.SecsPerMarketCycle * marketCycles;\n              const maxAmt = Math.floor((warehouse.size - warehouse.sizeUsed) / MaterialSizes[matName]);\n              buyAmt = Math.min(buyAmt, maxAmt);\n              if (buyAmt > 0) smartBuy[matName] = buyAmt;\n            }\n\n            // Find which material were trying to create the least amount of product with.\n            let worseAmt = 1e99;\n            for (const matName of Object.keys(smartBuy)) {\n              const buyAmt = smartBuy[matName];\n              if (buyAmt === undefined) throw new Error(`Somehow smartbuy matname is undefined`);\n              const reqMat = this.reqMats[matName];\n              if (reqMat === undefined) throw new Error(`reqMat \"${matName}\" is undefined`);\n              const amt = buyAmt / reqMat;\n              if (amt < worseAmt) worseAmt = amt;\n            }\n\n            // Align all the materials to the smallest amount.\n            for (const matName of Object.keys(smartBuy)) {\n              const reqMat = this.reqMats[matName];\n              if (reqMat === undefined) throw new Error(`reqMat \"${matName}\" is undefined`);\n              smartBuy[matName] = worseAmt * reqMat;\n            }\n\n            // Calculate the total size of all things were trying to buy\n            let totalSize = 0;\n            for (const matName of Object.keys(smartBuy)) {\n              const buyAmt = smartBuy[matName];\n              if (buyAmt === undefined) throw new Error(`Somehow smartbuy matname is undefined`);\n              totalSize += buyAmt * MaterialSizes[matName];\n            }\n\n            // Shrink to the size of available space.\n            const freeSpace = warehouse.size - warehouse.sizeUsed;\n            if (totalSize > freeSpace) {\n              for (const matName of Object.keys(smartBuy)) {\n                const buyAmt = smartBuy[matName];\n                if (buyAmt === undefined) throw new Error(`Somehow smartbuy matname is undefined`);\n                smartBuy[matName] = Math.floor((buyAmt * freeSpace) / totalSize);\n              }\n            }\n\n            // Use the materials already in the warehouse if the option is on.\n            for (const matName of Object.keys(smartBuy)) {\n              if (!warehouse.smartSupplyUseLeftovers[matName]) continue;\n              const mat = warehouse.materials[matName];\n              const buyAmt = smartBuy[matName];\n              if (buyAmt === undefined) throw new Error(`Somehow smartbuy matname is undefined`);\n              smartBuy[matName] = Math.max(0, buyAmt - mat.qty);\n            }\n\n            // buy them\n            for (const matName of Object.keys(smartBuy)) {\n              const mat = warehouse.materials[matName];\n              const buyAmt = smartBuy[matName];\n              if (buyAmt === undefined) throw new Error(`Somehow smartbuy matname is undefined`);\n              mat.qty += buyAmt;\n              expenses += buyAmt * mat.bCost;\n            }\n            break;\n          }\n          case \"PRODUCTION\":\n            warehouse.smartSupplyStore = 0; //Reset smart supply amount\n\n            /* Process production of materials */\n            if (this.prodMats.length > 0) {\n              const mat = warehouse.materials[this.prodMats[0]];\n              //Calculate the maximum production of this material based\n              //on the office's productivity\n              const maxProd =\n                this.getOfficeProductivity(office) *\n                this.prodMult * // Multiplier from materials\n                corporation.getProductionMultiplier() *\n                this.getProductionMultiplier(); // Multiplier from Research\n              let prod;\n\n              if (mat.prdman[0]) {\n                //Production is manually limited\n                prod = Math.min(maxProd, mat.prdman[1]);\n              } else {\n                prod = maxProd;\n              }\n              prod *= CorporationConstants.SecsPerMarketCycle * marketCycles; //Convert production from per second to per market cycle\n\n              // Calculate net change in warehouse storage making the produced materials will cost\n              let totalMatSize = 0;\n              for (let tmp = 0; tmp < this.prodMats.length; ++tmp) {\n                totalMatSize += MaterialSizes[this.prodMats[tmp]];\n              }\n              for (const reqMatName of Object.keys(this.reqMats)) {\n                const normQty = this.reqMats[reqMatName];\n                if (normQty === undefined) continue;\n                totalMatSize -= MaterialSizes[reqMatName] * normQty;\n              }\n              // If not enough space in warehouse, limit the amount of produced materials\n              if (totalMatSize > 0) {\n                const maxAmt = Math.floor((warehouse.size - warehouse.sizeUsed) / totalMatSize);\n                prod = Math.min(maxAmt, prod);\n              }\n\n              if (prod < 0) {\n                prod = 0;\n              }\n\n              // Keep track of production for smart supply (/s)\n              warehouse.smartSupplyStore += prod / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n\n              // Make sure we have enough resource to make our materials\n              let producableFrac = 1;\n              for (const reqMatName of Object.keys(this.reqMats)) {\n                if (this.reqMats.hasOwnProperty(reqMatName)) {\n                  const reqMat = this.reqMats[reqMatName];\n                  if (reqMat === undefined) continue;\n                  const req = reqMat * prod;\n                  if (warehouse.materials[reqMatName].qty < req) {\n                    producableFrac = Math.min(producableFrac, warehouse.materials[reqMatName].qty / req);\n                  }\n                }\n              }\n              if (producableFrac <= 0) {\n                producableFrac = 0;\n                prod = 0;\n              }\n\n              // Make our materials if they are producable\n              if (producableFrac > 0 && prod > 0) {\n                for (const reqMatName of Object.keys(this.reqMats)) {\n                  const reqMat = this.reqMats[reqMatName];\n                  if (reqMat === undefined) continue;\n                  const reqMatQtyNeeded = reqMat * prod * producableFrac;\n                  warehouse.materials[reqMatName].qty -= reqMatQtyNeeded;\n                  warehouse.materials[reqMatName].prd = 0;\n                  warehouse.materials[reqMatName].prd -=\n                    reqMatQtyNeeded / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n                }\n                for (let j = 0; j < this.prodMats.length; ++j) {\n                  warehouse.materials[this.prodMats[j]].qty += prod * producableFrac;\n                  warehouse.materials[this.prodMats[j]].qlt =\n                    office.employeeProd[EmployeePositions.Engineer] / 90 +\n                    Math.pow(this.sciResearch.qty, this.sciFac) +\n                    Math.pow(warehouse.materials[\"AICores\"].qty, this.aiFac) / 10e3;\n                }\n              } else {\n                for (const reqMatName of Object.keys(this.reqMats)) {\n                  if (this.reqMats.hasOwnProperty(reqMatName)) {\n                    warehouse.materials[reqMatName].prd = 0;\n                  }\n                }\n              }\n\n              //Per second\n              const fooProd = (prod * producableFrac) / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n              for (let fooI = 0; fooI < this.prodMats.length; ++fooI) {\n                warehouse.materials[this.prodMats[fooI]].prd = fooProd;\n              }\n            } else {\n              //If this doesn't produce any materials, then it only creates\n              //Products. Creating products will consume materials. The\n              //Production of all consumed materials must be set to 0\n              for (const reqMatName of Object.keys(this.reqMats)) {\n                warehouse.materials[reqMatName].prd = 0;\n              }\n            }\n            break;\n\n          case \"SALE\":\n            /* Process sale of materials */\n            for (const matName of Object.keys(warehouse.materials)) {\n              if (warehouse.materials.hasOwnProperty(matName)) {\n                const mat = warehouse.materials[matName];\n                if (mat.sCost < 0 || mat.sllman[0] === false) {\n                  mat.sll = 0;\n                  continue;\n                }\n\n                // Sale multipliers\n                const businessFactor = this.getBusinessFactor(office); //Business employee productivity\n                const advertisingFactor = this.getAdvertisingFactors()[0]; //Awareness + popularity\n                const marketFactor = this.getMarketFactor(mat); //Competition + demand\n\n                // Determine the cost that the material will be sold at\n                const markupLimit = mat.getMarkupLimit();\n                let sCost;\n                if (mat.marketTa2) {\n                  const prod = mat.prd;\n\n                  // Reverse engineer the 'maxSell' formula\n                  // 1. Set 'maxSell' = prod\n                  // 2. Substitute formula for 'markup'\n                  // 3. Solve for 'sCost'\n                  const numerator = markupLimit;\n                  const sqrtNumerator = prod;\n                  const sqrtDenominator =\n                    (mat.qlt + 0.001) *\n                    marketFactor *\n                    businessFactor *\n                    corporation.getSalesMultiplier() *\n                    advertisingFactor *\n                    this.getSalesMultiplier();\n                  const denominator = Math.sqrt(sqrtNumerator / sqrtDenominator);\n                  let optimalPrice;\n                  if (sqrtDenominator === 0 || denominator === 0) {\n                    if (sqrtNumerator === 0) {\n                      optimalPrice = 0; // No production\n                    } else {\n                      optimalPrice = mat.bCost + markupLimit;\n                      console.warn(`In Corporation, found illegal 0s when trying to calculate MarketTA2 sale cost`);\n                    }\n                  } else {\n                    optimalPrice = numerator / denominator + mat.bCost;\n                  }\n\n                  // We'll store this \"Optimal Price\" in a property so that we don't have\n                  // to re-calculate it for the UI\n                  mat.marketTa2Price = optimalPrice;\n\n                  sCost = optimalPrice;\n                } else if (mat.marketTa1) {\n                  sCost = mat.bCost + markupLimit;\n                } else if (isString(mat.sCost)) {\n                  sCost = (mat.sCost as string).replace(/MP/g, mat.bCost + \"\");\n                  sCost = eval(sCost);\n                } else {\n                  sCost = mat.sCost;\n                }\n\n                // Calculate how much of the material sells (per second)\n                let markup = 1;\n                if (sCost > mat.bCost) {\n                  //Penalty if difference between sCost and bCost is greater than markup limit\n                  if (sCost - mat.bCost > markupLimit) {\n                    markup = Math.pow(markupLimit / (sCost - mat.bCost), 2);\n                  }\n                } else if (sCost < mat.bCost) {\n                  if (sCost <= 0) {\n                    markup = 1e12; //Sell everything, essentially discard\n                  } else {\n                    //Lower prices than market increases sales\n                    markup = mat.bCost / sCost;\n                  }\n                }\n\n                mat.maxsll =\n                  (mat.qlt + 0.001) *\n                  marketFactor *\n                  markup *\n                  businessFactor *\n                  corporation.getSalesMultiplier() *\n                  advertisingFactor *\n                  this.getSalesMultiplier();\n                let sellAmt;\n                if (isString(mat.sllman[1])) {\n                  //Dynamically evaluated\n                  let tmp = (mat.sllman[1] as string).replace(/MAX/g, (mat.maxsll + \"\").toUpperCase());\n                  tmp = tmp.replace(/PROD/g, mat.prd + \"\");\n                  try {\n                    sellAmt = eval(tmp);\n                  } catch (e) {\n                    dialogBoxCreate(\n                      \"Error evaluating your sell amount for material \" +\n                        mat.name +\n                        \" in \" +\n                        this.name +\n                        \"'s \" +\n                        city +\n                        \" office. The sell amount \" +\n                        \"is being set to zero\",\n                    );\n                    sellAmt = 0;\n                  }\n                  sellAmt = Math.min(mat.maxsll, sellAmt);\n                } else if (mat.sllman[1] === -1) {\n                  //Backwards compatibility, -1 = MAX\n                  sellAmt = mat.maxsll;\n                } else {\n                  //Player's input value is just a number\n                  sellAmt = Math.min(mat.maxsll, mat.sllman[1] as number);\n                }\n\n                sellAmt = sellAmt * CorporationConstants.SecsPerMarketCycle * marketCycles;\n                sellAmt = Math.min(mat.qty, sellAmt);\n                if (sellAmt < 0) {\n                  console.warn(`sellAmt calculated to be negative for ${matName} in ${city}`);\n                  mat.sll = 0;\n                  continue;\n                }\n                if (sellAmt && sCost >= 0) {\n                  mat.qty -= sellAmt;\n                  revenue += sellAmt * sCost;\n                  mat.sll = sellAmt / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n                } else {\n                  mat.sll = 0;\n                }\n              }\n            } //End processing of sale of materials\n            break;\n\n          case \"EXPORT\":\n            for (const matName of Object.keys(warehouse.materials)) {\n              if (warehouse.materials.hasOwnProperty(matName)) {\n                const mat = warehouse.materials[matName];\n                mat.totalExp = 0; //Reset export\n                for (let expI = 0; expI < mat.exp.length; ++expI) {\n                  const exp = mat.exp[expI];\n                  const amtStr = exp.amt.replace(\n                    /MAX/g,\n                    (mat.qty / (CorporationConstants.SecsPerMarketCycle * marketCycles) + \"\").toUpperCase(),\n                  );\n                  let amt = 0;\n                  try {\n                    amt = eval(amtStr);\n                  } catch (e) {\n                    dialogBoxCreate(\n                      \"Calculating export for \" +\n                        mat.name +\n                        \" in \" +\n                        this.name +\n                        \"'s \" +\n                        city +\n                        \" division failed with \" +\n                        \"error: \" +\n                        e,\n                    );\n                    continue;\n                  }\n                  if (isNaN(amt)) {\n                    dialogBoxCreate(\n                      \"Error calculating export amount for \" +\n                        mat.name +\n                        \" in \" +\n                        this.name +\n                        \"'s \" +\n                        city +\n                        \" division.\",\n                    );\n                    continue;\n                  }\n                  amt = amt * CorporationConstants.SecsPerMarketCycle * marketCycles;\n\n                  if (mat.qty < amt) {\n                    amt = mat.qty;\n                  }\n                  if (amt === 0) {\n                    break; //None left\n                  }\n                  for (let foo = 0; foo < corporation.divisions.length; ++foo) {\n                    if (corporation.divisions[foo].name === exp.ind) {\n                      const expIndustry = corporation.divisions[foo];\n                      const expWarehouse = expIndustry.warehouses[exp.city];\n                      if (!(expWarehouse instanceof Warehouse)) {\n                        console.error(`Invalid export! ${expIndustry.name} ${exp.city}`);\n                        break;\n                      }\n\n                      // Make sure theres enough space in warehouse\n                      if (expWarehouse.sizeUsed >= expWarehouse.size) {\n                        // Warehouse at capacity. Exporting doesnt\n                        // affect revenue so just return 0's\n                        return [0, 0];\n                      } else {\n                        const maxAmt = Math.floor((expWarehouse.size - expWarehouse.sizeUsed) / MaterialSizes[matName]);\n                        amt = Math.min(maxAmt, amt);\n                      }\n                      expWarehouse.materials[matName].imp +=\n                        amt / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n                      expWarehouse.materials[matName].qty += amt;\n                      expWarehouse.materials[matName].qlt = mat.qlt;\n                      mat.qty -= amt;\n                      mat.totalExp += amt;\n                      expIndustry.updateWarehouseSizeUsed(expWarehouse);\n                      break;\n                    }\n                  }\n                }\n                //totalExp should be per second\n                mat.totalExp /= CorporationConstants.SecsPerMarketCycle * marketCycles;\n              }\n            }\n\n            break;\n\n          case \"START\":\n            break;\n          default:\n            console.error(`Invalid state: ${this.state}`);\n            break;\n        } //End switch(this.state)\n        this.updateWarehouseSizeUsed(warehouse);\n      } // End warehouse\n\n      //Produce Scientific Research based on R&D employees\n      //Scientific Research can be produced without a warehouse\n      if (office instanceof OfficeSpace) {\n        this.sciResearch.qty +=\n          0.004 *\n          Math.pow(office.employeeProd[EmployeePositions.RandD], 0.5) *\n          corporation.getScientificResearchMultiplier() *\n          this.getScientificResearchMultiplier();\n      }\n    }\n    return [revenue, expenses];\n  }\n\n  //Process production & sale of this industry's FINISHED products (including all of their stats)\n  processProducts(marketCycles = 1, corporation: ICorporation): [number, number] {\n    let revenue = 0;\n    const expenses = 0;\n\n    //Create products\n    if (this.state === \"PRODUCTION\") {\n      for (const prodName of Object.keys(this.products)) {\n        const prod = this.products[prodName];\n        if (prod === undefined) continue;\n        if (!prod.fin) {\n          const city = prod.createCity;\n          const office = this.offices[city];\n          if (office === 0) continue;\n\n          prod.createProduct(marketCycles, office.employeeProd);\n          if (prod.prog >= 100) {\n            prod.finishProduct(this);\n          }\n          break;\n        }\n      }\n    }\n\n    //Produce Products\n    for (const prodName of Object.keys(this.products)) {\n      if (this.products.hasOwnProperty(prodName)) {\n        const prod = this.products[prodName];\n        if (prod instanceof Product && prod.fin) {\n          revenue += this.processProduct(marketCycles, prod, corporation);\n        }\n      }\n    }\n    return [revenue, expenses];\n  }\n\n  //Processes FINISHED products\n  processProduct(marketCycles = 1, product: Product, corporation: ICorporation): number {\n    let totalProfit = 0;\n    for (let i = 0; i < CorporationConstants.Cities.length; ++i) {\n      const city = CorporationConstants.Cities[i];\n      const office = this.offices[city];\n      if (office === 0) continue;\n      const warehouse = this.warehouses[city];\n      if (warehouse instanceof Warehouse) {\n        switch (this.state) {\n          case \"PRODUCTION\": {\n            //Calculate the maximum production of this material based\n            //on the office's productivity\n            const maxProd =\n              this.getOfficeProductivity(office, { forProduct: true }) *\n              corporation.getProductionMultiplier() *\n              this.prodMult * // Multiplier from materials\n              this.getProductionMultiplier() * // Multiplier from research\n              this.getProductProductionMultiplier(); // Multiplier from research\n            let prod;\n\n            //Account for whether production is manually limited\n            if (product.prdman[city][0]) {\n              prod = Math.min(maxProd, product.prdman[city][1]);\n            } else {\n              prod = maxProd;\n            }\n            prod *= CorporationConstants.SecsPerMarketCycle * marketCycles;\n\n            //Calculate net change in warehouse storage making the Products will cost\n            let netStorageSize = product.siz;\n            for (const reqMatName of Object.keys(product.reqMats)) {\n              if (product.reqMats.hasOwnProperty(reqMatName)) {\n                const normQty = product.reqMats[reqMatName];\n                netStorageSize -= MaterialSizes[reqMatName] * normQty;\n              }\n            }\n\n            //If there's not enough space in warehouse, limit the amount of Product\n            if (netStorageSize > 0) {\n              const maxAmt = Math.floor((warehouse.size - warehouse.sizeUsed) / netStorageSize);\n              prod = Math.min(maxAmt, prod);\n            }\n\n            warehouse.smartSupplyStore += prod / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n\n            //Make sure we have enough resources to make our Products\n            let producableFrac = 1;\n            for (const reqMatName of Object.keys(product.reqMats)) {\n              if (product.reqMats.hasOwnProperty(reqMatName)) {\n                const req = product.reqMats[reqMatName] * prod;\n                if (warehouse.materials[reqMatName].qty < req) {\n                  producableFrac = Math.min(producableFrac, warehouse.materials[reqMatName].qty / req);\n                }\n              }\n            }\n\n            //Make our Products if they are producable\n            if (producableFrac > 0 && prod > 0) {\n              for (const reqMatName of Object.keys(product.reqMats)) {\n                if (product.reqMats.hasOwnProperty(reqMatName)) {\n                  const reqMatQtyNeeded = product.reqMats[reqMatName] * prod * producableFrac;\n                  warehouse.materials[reqMatName].qty -= reqMatQtyNeeded;\n                  warehouse.materials[reqMatName].prd -=\n                    reqMatQtyNeeded / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n                }\n              }\n              //Quantity\n              product.data[city][0] += prod * producableFrac;\n            }\n\n            //Keep track of production Per second\n            product.data[city][1] = (prod * producableFrac) / (CorporationConstants.SecsPerMarketCycle * marketCycles);\n            break;\n          }\n          case \"SALE\": {\n            //Process sale of Products\n            product.pCost = 0; //Estimated production cost\n            for (const reqMatName of Object.keys(product.reqMats)) {\n              if (product.reqMats.hasOwnProperty(reqMatName)) {\n                product.pCost += product.reqMats[reqMatName] * warehouse.materials[reqMatName].bCost;\n              }\n            }\n\n            // Since its a product, its production cost is increased for labor\n            product.pCost *= CorporationConstants.ProductProductionCostRatio;\n\n            // Sale multipliers\n            const businessFactor = this.getBusinessFactor(office); //Business employee productivity\n            const advertisingFactor = this.getAdvertisingFactors()[0]; //Awareness + popularity\n            const marketFactor = this.getMarketFactor(product); //Competition + demand\n\n            // Calculate Sale Cost (sCost), which could be dynamically evaluated\n            const markupLimit = product.rat / product.mku;\n            let sCost;\n            if (product.marketTa2) {\n              const prod = product.data[city][1];\n\n              // Reverse engineer the 'maxSell' formula\n              // 1. Set 'maxSell' = prod\n              // 2. Substitute formula for 'markup'\n              // 3. Solve for 'sCost'roduct.pCost = sCost\n              const numerator = markupLimit;\n              const sqrtNumerator = prod;\n              const sqrtDenominator =\n                0.5 *\n                Math.pow(product.rat, 0.65) *\n                marketFactor *\n                corporation.getSalesMultiplier() *\n                businessFactor *\n                advertisingFactor *\n                this.getSalesMultiplier();\n              const denominator = Math.sqrt(sqrtNumerator / sqrtDenominator);\n              let optimalPrice;\n              if (sqrtDenominator === 0 || denominator === 0) {\n                if (sqrtNumerator === 0) {\n                  optimalPrice = 0; // No production\n                } else {\n                  optimalPrice = product.pCost + markupLimit;\n                  console.warn(`In Corporation, found illegal 0s when trying to calculate MarketTA2 sale cost`);\n                }\n              } else {\n                optimalPrice = numerator / denominator + product.pCost;\n              }\n\n              // Store this \"optimal Price\" in a property so we don't have to re-calculate for UI\n              product.marketTa2Price[city] = optimalPrice;\n              sCost = optimalPrice;\n            } else if (product.marketTa1) {\n              sCost = product.pCost + markupLimit;\n            } else if (isString(product.sCost)) {\n              const sCostString = product.sCost as string;\n              if (product.mku === 0) {\n                console.error(`mku is zero, reverting to 1 to avoid Infinity`);\n                product.mku = 1;\n              }\n              sCost = sCostString.replace(/MP/g, product.pCost + product.rat / product.mku + \"\");\n              sCost = eval(sCost);\n            } else {\n              sCost = product.sCost;\n            }\n\n            let markup = 1;\n            if (sCost > product.pCost) {\n              if (sCost - product.pCost > markupLimit) {\n                markup = markupLimit / (sCost - product.pCost);\n              }\n            }\n\n            product.maxsll =\n              0.5 *\n              Math.pow(product.rat, 0.65) *\n              marketFactor *\n              corporation.getSalesMultiplier() *\n              Math.pow(markup, 2) *\n              businessFactor *\n              advertisingFactor *\n              this.getSalesMultiplier();\n            let sellAmt;\n            if (product.sllman[city][0] && isString(product.sllman[city][1])) {\n              //Sell amount is dynamically evaluated\n              let tmp = product.sllman[city][1].replace(/MAX/g, (product.maxsll + \"\").toUpperCase());\n              tmp = tmp.replace(/PROD/g, product.data[city][1]);\n              try {\n                tmp = eval(tmp);\n              } catch (e) {\n                dialogBoxCreate(\n                  \"Error evaluating your sell price expression for \" +\n                    product.name +\n                    \" in \" +\n                    this.name +\n                    \"'s \" +\n                    city +\n                    \" office. Sell price is being set to MAX\",\n                );\n                tmp = product.maxsll;\n              }\n              sellAmt = Math.min(product.maxsll, tmp);\n            } else if (product.sllman[city][0] && product.sllman[city][1] > 0) {\n              //Sell amount is manually limited\n              sellAmt = Math.min(product.maxsll, product.sllman[city][1]);\n            } else if (product.sllman[city][0] === false) {\n              sellAmt = 0;\n            } else {\n              sellAmt = product.maxsll;\n            }\n            if (sellAmt < 0) {\n              sellAmt = 0;\n            }\n            sellAmt = sellAmt * CorporationConstants.SecsPerMarketCycle * marketCycles;\n            sellAmt = Math.min(product.data[city][0], sellAmt); //data[0] is qty\n            if (sellAmt && sCost) {\n              product.data[city][0] -= sellAmt; //data[0] is qty\n              totalProfit += sellAmt * sCost;\n              product.data[city][2] = sellAmt / (CorporationConstants.SecsPerMarketCycle * marketCycles); //data[2] is sell property\n            } else {\n              product.data[city][2] = 0; //data[2] is sell property\n            }\n            break;\n          }\n          case \"START\":\n          case \"PURCHASE\":\n          case \"EXPORT\":\n            break;\n          default:\n            console.error(`Invalid State: ${this.state}`);\n            break;\n        } //End switch(this.state)\n      }\n    }\n    return totalProfit;\n  }\n\n  discontinueProduct(product: Product): void {\n    for (const productName of Object.keys(this.products)) {\n      if (this.products.hasOwnProperty(productName)) {\n        if (product === this.products[productName]) {\n          delete this.products[productName];\n        }\n      }\n    }\n  }\n\n  getAdVertCost(): number {\n    return 1e9 * Math.pow(1.06, this.numAdVerts);\n  }\n\n  applyAdVert(corporation: ICorporation): void {\n    const advMult = corporation.getAdvertisingMultiplier() * this.getAdvertisingMultiplier();\n    const awareness = (this.awareness + 3 * advMult) * (1.01 * advMult);\n    this.awareness = Math.min(awareness, Number.MAX_VALUE);\n\n    const popularity = (this.popularity + 1 * advMult) * ((1 + getRandomInt(1, 3) / 100) * advMult);\n    this.popularity = Math.min(popularity, Number.MAX_VALUE);\n\n    ++this.numAdVerts;\n  }\n\n  // Returns how much of a material can be produced based of office productivity (employee stats)\n  getOfficeProductivity(office: OfficeSpace, params: { forProduct?: boolean } = {}): number {\n    const opProd = office.employeeProd[EmployeePositions.Operations];\n    const engrProd = office.employeeProd[EmployeePositions.Engineer];\n    const mgmtProd = office.employeeProd[EmployeePositions.Management];\n    const total = opProd + engrProd + mgmtProd;\n\n    if (total <= 0) return 0;\n\n    // Management is a multiplier for the production from Operations and Engineers\n    const mgmtFactor = 1 + mgmtProd / (1.2 * total);\n\n    // For production, Operations is slightly more important than engineering\n    // Both Engineering and Operations have diminishing returns\n    const prod = (Math.pow(opProd, 0.4) + Math.pow(engrProd, 0.3)) * mgmtFactor;\n\n    // Generic multiplier for the production. Used for game-balancing purposes\n    const balancingMult = 0.05;\n\n    if (params && params.forProduct) {\n      // Products are harder to create and therefore have less production\n      return 0.5 * balancingMult * prod;\n    } else {\n      return balancingMult * prod;\n    }\n  }\n\n  // Returns a multiplier based on the office' 'Business' employees that affects sales\n  getBusinessFactor(office: OfficeSpace): number {\n    const businessProd = 1 + office.employeeProd[EmployeePositions.Business];\n\n    return calculateEffectWithFactors(businessProd, 0.26, 10e3);\n  }\n\n  //Returns a set of multipliers based on the Industry's awareness, popularity, and advFac. This\n  //multiplier affects sales. The result is:\n  //  [Total sales mult, total awareness mult, total pop mult, awareness/pop ratio mult]\n  getAdvertisingFactors(): [number, number, number, number] {\n    const awarenessFac = Math.pow(this.awareness + 1, this.advFac);\n    const popularityFac = Math.pow(this.popularity + 1, this.advFac);\n    const ratioFac = this.awareness === 0 ? 0.01 : Math.max((this.popularity + 0.001) / this.awareness, 0.01);\n    const totalFac = Math.pow(awarenessFac * popularityFac * ratioFac, 0.85);\n    return [totalFac, awarenessFac, popularityFac, ratioFac];\n  }\n\n  //Returns a multiplier based on a materials demand and competition that affects sales\n  getMarketFactor(mat: { dmd: number; cmp: number }): number {\n    return Math.max(0.1, (mat.dmd * (100 - mat.cmp)) / 100);\n  }\n\n  // Returns a boolean indicating whether this Industry has the specified Research\n  hasResearch(name: string): boolean {\n    return this.researched[name] === true;\n  }\n\n  updateResearchTree(): void {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry \"${this.type}\"`);\n\n    // Since ResearchTree data isnt saved, we'll update the Research Tree data\n    // based on the stored 'researched' property in the Industry object\n    if (Object.keys(researchTree.researched).length !== Object.keys(this.researched).length) {\n      for (const research of Object.keys(this.researched)) {\n        researchTree.research(research);\n      }\n    }\n  }\n\n  // Get multipliers from Research\n  getAdvertisingMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getAdvertisingMultiplier();\n  }\n\n  getEmployeeChaMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getEmployeeChaMultiplier();\n  }\n\n  getEmployeeCreMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getEmployeeCreMultiplier();\n  }\n\n  getEmployeeEffMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getEmployeeEffMultiplier();\n  }\n\n  getEmployeeIntMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getEmployeeIntMultiplier();\n  }\n\n  getProductionMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getProductionMultiplier();\n  }\n\n  getProductProductionMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getProductProductionMultiplier();\n  }\n\n  getSalesMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getSalesMultiplier();\n  }\n\n  getScientificResearchMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getScientificResearchMultiplier();\n  }\n\n  getStorageMultiplier(): number {\n    const researchTree = IndustryResearchTrees[this.type];\n    if (researchTree === undefined) throw new Error(`Invalid industry: \"${this.type}\"`);\n    this.updateResearchTree();\n    return researchTree.getStorageMultiplier();\n  }\n\n  /**\n   * Serialize the current object to a JSON save state.\n   */\n  toJSON(): IReviverValue {\n    return Generic_toJSON(\"Industry\", this);\n  }\n\n  /**\n   * Initiatizes a Industry object from a JSON save state.\n   */\n  static fromJSON(value: IReviverValue): Industry {\n    return Generic_fromJSON(Industry, value.data);\n  }\n}\n\nReviver.constructors.Industry = Industry;\n","export type ObjectValidator<T> = {\n  [key in keyof T]?: ParameterValidator<T, keyof T>;\n};\n\ninterface ParameterValidatorObject<Type, Key extends keyof Type> {\n  default?: unknown;\n  min?: number;\n  max?: number;\n  func?: (obj: Type, validator: ObjectValidator<Type>, key: Key) => void;\n}\ntype ParameterValidatorFunction<Type, Key extends keyof Type> = (obj: Type, key: Key) => void;\ntype ParameterValidator<Type, Key extends keyof Type> =\n  | ParameterValidatorObject<Type, Key>\n  | ParameterValidatorFunction<Type, Key>;\n\nexport function validateObject<Type extends Record<string, unknown>, Key extends keyof Type>(\n  obj: Type,\n  validator: ObjectValidator<Type>,\n): void {\n  for (const key of Object.keys(validator) as Key[]) {\n    const paramValidator = validator[key];\n    if (paramValidator !== undefined) {\n      if (typeof paramValidator === \"function\") {\n        paramValidator(obj, key);\n      } else if (paramValidator.func !== undefined) {\n        paramValidator.func(obj, validator, key);\n      } else {\n        if (typeof obj[key] !== typeof paramValidator.default) {\n          obj[key] = paramValidator.default as Type[Key];\n        }\n        if (typeof obj[key] === \"number\" && paramValidator.min !== undefined) {\n          if (obj[key] < paramValidator.min) obj[key] = paramValidator.min as Type[Key];\n        }\n        if (typeof obj[key] === \"number\" && paramValidator.max !== undefined) {\n          if (obj[key] > paramValidator.max) obj[key] = paramValidator.max as Type[Key];\n        }\n      }\n    }\n  }\n}\n\nexport function minMax<Type, Key extends keyof Type>(\n  def: number,\n  min: number,\n  max: number,\n): (obj: Type, key: Key & keyof Type) => void {\n  return (obj, key) => {\n    if (typeof obj[key] !== \"number\") {\n      obj[key] = def as unknown as Type[Key];\n      return;\n    }\n    if ((obj[key] as unknown as number) < min) {\n      obj[key] = min as unknown as Type[Key];\n    }\n    if ((obj[key] as unknown as number) > max) {\n      obj[key] = max as unknown as Type[Key];\n    }\n  };\n}\n\nexport function oneOf<Type, Key extends keyof Type, Value>(\n  def: Value,\n  options: Value[],\n): (obj: Type, key: Key & keyof Type) => void {\n  return (obj, key) => {\n    if (typeof obj[key] !== typeof def) {\n      obj[key] = def as unknown as Type[Key];\n      return;\n    }\n    if (!options.includes(obj[key] as unknown as Value)) {\n      obj[key] = def as unknown as Type[Key];\n    }\n  };\n}\n\nexport function subsetOf<Type, Key extends keyof Type, Value>(\n  options: Value[],\n): (obj: Type, key: Key & keyof Type) => void {\n  return (obj, key) => {\n    if (typeof obj[key] !== \"object\" || !Array.isArray(obj[key])) {\n      obj[key] = [] as unknown as Type[Key];\n      return;\n    }\n    const validValues: Value[] = [];\n    for (const value of obj[key] as unknown as Value[]) {\n      if (options.includes(value)) validValues.push(value);\n    }\n    obj[key] = validValues as unknown as Type[Key];\n  };\n}\n","/**\n * This is a component that implements a mathematical formula used commonly throughout the\n * game. This formula is (typically) used to calculate the effect that various statistics\n * have on a game mechanic. It looks something like:\n *\n *  (stat ^ exponential factor) + (stat / linear factor)\n *\n * where the exponential factor is a number between 0 and 1 and the linear factor\n * is typically a relatively larger number.\n *\n * This formula ensures that the effects of the statistic that is being processed\n * has diminishing returns, but never loses its effectiveness as you continue\n * to raise it.\n */\nexport function calculateEffectWithFactors(n: number, expFac: number, linearFac: number): number {\n  if (expFac <= 0 || expFac >= 1) {\n    console.warn(`Exponential factor is ${expFac}. This is not an intended value for it`);\n  }\n  if (linearFac < 1) {\n    console.warn(`Linear factor is ${linearFac}. This is not an intended value for it`);\n  }\n\n  return Math.pow(n, expFac) + n / linearFac;\n}\n","import { EqualityFunc } from \"../types\";\nimport { isString } from \"./helpers/isString\";\n\n/*\nConverts a date representing time in milliseconds to a string with the format H hours M minutes and S seconds\ne.g.    10000 -> \"10 seconds\"\n        120000 -> \"2 minutes and 0 seconds\"\n*/\nfunction convertTimeMsToTimeElapsedString(time: number, showMilli = false): string {\n  time = Math.floor(time);\n  const millisecondsPerSecond = 1000;\n  const secondPerMinute = 60;\n  const minutesPerHours = 60;\n  const secondPerHours: number = secondPerMinute * minutesPerHours;\n  const hoursPerDays = 24;\n  const secondPerDay: number = secondPerHours * hoursPerDays;\n\n  // Convert ms to seconds, since we only have second-level precision\n  const totalSeconds: number = Math.floor(time / millisecondsPerSecond);\n\n  const days: number = Math.floor(totalSeconds / secondPerDay);\n  const secTruncDays: number = totalSeconds % secondPerDay;\n\n  const hours: number = Math.floor(secTruncDays / secondPerHours);\n  const secTruncHours: number = secTruncDays % secondPerHours;\n\n  const minutes: number = Math.floor(secTruncHours / secondPerMinute);\n  const secTruncMinutes: number = secTruncHours % secondPerMinute;\n\n  const milliTruncSec: string = (() => {\n    let str = `${time % millisecondsPerSecond}`;\n    while (str.length < 3) str = \"0\" + str;\n    return str;\n  })();\n\n  const seconds: string = showMilli ? `${secTruncMinutes}.${milliTruncSec}` : `${secTruncMinutes}`;\n\n  let res = \"\";\n  if (days > 0) {\n    res += `${days} days `;\n  }\n  if (hours > 0) {\n    res += `${hours} hours `;\n  }\n  if (minutes > 0) {\n    res += `${minutes} minutes `;\n  }\n  res += `${seconds} seconds`;\n\n  return res;\n}\n\n// Finds the longest common starting substring in a set of strings\nfunction longestCommonStart(strings: string[]): string {\n  if (!containsAllStrings(strings)) {\n    return \"\";\n  }\n  if (strings.length === 0) {\n    return \"\";\n  }\n\n  const A: string[] = strings.concat().sort();\n  const a1: string = A[0];\n  const a2: string = A[A.length - 1];\n  const L: number = a1.length;\n  let i = 0;\n  const areEqualCaseInsensitive: EqualityFunc<string> = (a: string, b: string) => a.toUpperCase() === b.toUpperCase();\n  while (i < L && areEqualCaseInsensitive(a1.charAt(i), a2.charAt(i))) {\n    i++;\n  }\n\n  return a1.substring(0, i);\n}\n\n// Returns whether an array contains entirely of string objects\nfunction containsAllStrings(arr: string[]): boolean {\n  return arr.every(isString);\n}\n\n// Formats a number with commas and a specific number of decimal digits\nfunction formatNumber(num: number, numFractionDigits = 0): string {\n  return num.toLocaleString(undefined, {\n    maximumFractionDigits: numFractionDigits,\n    minimumFractionDigits: numFractionDigits,\n  });\n}\n\n// Generates a random alphanumeric string with N characters\nfunction generateRandomString(n: number): string {\n  let str = \"\";\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (let i = 0; i < n; i++) {\n    str += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n\n  return str;\n}\n\n/**\n * Hashes the input string. This is a fast hash, so NOT good for cryptography.\n * This has been ripped off here: https://stackoverflow.com/a/52171480\n * @param str The string that is to be hashed\n * @param seed A seed to randomize the result\n * @returns An hexadecimal string representation of the hashed input\n */\nfunction cyrb53(str: string, seed = 0): string {\n  let h1 = 0xdeadbeef ^ seed;\n  let h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n    ch = str.charCodeAt(i);\n    h1 = Math.imul(h1 ^ ch, 2654435761);\n    h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n  return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(16);\n}\n\nfunction capitalizeFirstLetter(s: string): string {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nfunction capitalizeEachWord(s: string): string {\n  return s\n    .split(\" \")\n    .map((word) => capitalizeFirstLetter(word))\n    .join(\" \");\n}\n\nexport {\n  convertTimeMsToTimeElapsedString,\n  longestCommonStart,\n  containsAllStrings,\n  formatNumber,\n  generateRandomString,\n  cyrb53,\n  capitalizeFirstLetter,\n  capitalizeEachWord,\n};\n","import { CorporationConstants } from \"./data/Constants\";\nimport { getRandomInt } from \"../utils/helpers/getRandomInt\";\nimport { Generic_fromJSON, Generic_toJSON, IReviverValue, Reviver } from \"../utils/JSONReviver\";\nimport { EmployeePositions } from \"./EmployeePositions\";\nimport { ICorporation } from \"./ICorporation\";\nimport { IIndustry } from \"./IIndustry\";\n\ninterface IParams {\n  name?: string;\n  morale?: number;\n  happiness?: number;\n  energy?: number;\n  intelligence?: number;\n  charisma?: number;\n  experience?: number;\n  creativity?: number;\n  efficiency?: number;\n  salary?: number;\n  loc?: string;\n}\n\nexport class Employee {\n  name: string;\n  mor: number;\n  hap: number;\n  ene: number;\n  int: number;\n  cha: number;\n  exp: number;\n  cre: number;\n  eff: number;\n  sal: number;\n  cyclesUntilRaise = CorporationConstants.CyclesPerEmployeeRaise;\n  loc: string;\n  pos: string;\n  nextPos: string;\n\n  constructor(params: IParams = {}) {\n    this.name = params.name ? params.name : \"Bobby\";\n\n    //Morale, happiness, and energy are 0-100\n    this.mor = params.morale ? params.morale : getRandomInt(50, 100);\n    this.hap = params.happiness ? params.happiness : getRandomInt(50, 100);\n    this.ene = params.energy ? params.energy : getRandomInt(50, 100);\n\n    this.int = params.intelligence ? params.intelligence : getRandomInt(10, 50);\n    this.cha = params.charisma ? params.charisma : getRandomInt(10, 50);\n    this.exp = params.experience ? params.experience : getRandomInt(10, 50);\n    this.cre = params.creativity ? params.creativity : getRandomInt(10, 50);\n    this.eff = params.efficiency ? params.efficiency : getRandomInt(10, 50);\n    this.sal = params.salary ? params.salary : getRandomInt(0.1, 5);\n\n    this.loc = params.loc ? params.loc : \"\";\n    this.pos = EmployeePositions.Unassigned;\n    this.nextPos = this.pos;\n  }\n\n  //Returns the amount the employee needs to be paid\n  process(marketCycles = 1): number {\n    const gain = 0.003 * marketCycles;\n    const det = gain * Math.random();\n    this.exp += gain;\n\n    //Training\n    const trainingEff = gain * Math.random();\n    if (this.pos === EmployeePositions.Training) {\n      //To increase creativity and intelligence special upgrades are needed\n      this.cha += trainingEff;\n      this.exp += trainingEff;\n      this.eff += trainingEff;\n    }\n\n    this.ene -= det;\n    this.hap -= det;\n\n    const salary = this.sal * marketCycles * CorporationConstants.SecsPerMarketCycle;\n    return salary;\n  }\n\n  calculateProductivity(corporation: ICorporation, industry: IIndustry): number {\n    const effCre = this.cre * corporation.getEmployeeCreMultiplier() * industry.getEmployeeCreMultiplier(),\n      effCha = this.cha * corporation.getEmployeeChaMultiplier() * industry.getEmployeeChaMultiplier(),\n      effInt = this.int * corporation.getEmployeeIntMultiplier() * industry.getEmployeeIntMultiplier(),\n      effEff = this.eff * corporation.getEmployeeEffMultiplier() * industry.getEmployeeEffMultiplier();\n    const prodBase = this.mor * this.hap * this.ene * 1e-6;\n    let prodMult = 0;\n    switch (this.pos) {\n      //Calculate productivity based on position. This is multipled by prodBase\n      //to get final value\n      case EmployeePositions.Operations:\n        prodMult = 0.6 * effInt + 0.1 * effCha + this.exp + 0.5 * effCre + effEff;\n        break;\n      case EmployeePositions.Engineer:\n        prodMult = effInt + 0.1 * effCha + 1.5 * this.exp + effEff;\n        break;\n      case EmployeePositions.Business:\n        prodMult = 0.4 * effInt + effCha + 0.5 * this.exp;\n        break;\n      case EmployeePositions.Management:\n        prodMult = 2 * effCha + this.exp + 0.2 * effCre + 0.7 * effEff;\n        break;\n      case EmployeePositions.RandD:\n        prodMult = 1.5 * effInt + 0.8 * this.exp + effCre + 0.5 * effEff;\n        break;\n      case EmployeePositions.Unassigned:\n      case EmployeePositions.Training:\n        prodMult = 0;\n        break;\n      default:\n        console.error(`Invalid employee position: ${this.pos}`);\n        break;\n    }\n    return prodBase * prodMult;\n  }\n\n  toJSON(): IReviverValue {\n    return Generic_toJSON(\"Employee\", this);\n  }\n\n  static fromJSON(value: IReviverValue): Employee {\n    return Generic_fromJSON(Employee, value.data);\n  }\n}\n\nReviver.constructors.Employee = Employee;\n","import { Industries } from \"./IndustryData\";\nimport { IMap } from \"../types\";\n\nexport interface IProductRatingWeight {\n  Aesthetics?: number;\n  Durability?: number;\n  Features?: number;\n  Quality?: number;\n  Performance?: number;\n  Reliability?: number;\n}\n\nexport const ProductRatingWeights: IMap<any> = {\n  [Industries.Food]: {\n    Quality: 0.7,\n    Durability: 0.1,\n    Aesthetics: 0.2,\n  },\n  [Industries.Tobacco]: {\n    Quality: 0.4,\n    Durability: 0.2,\n    Reliability: 0.2,\n    Aesthetics: 0.2,\n  },\n  [Industries.Pharmaceutical]: {\n    Quality: 0.2,\n    Performance: 0.2,\n    Durability: 0.1,\n    Reliability: 0.3,\n    Features: 0.2,\n  },\n  [Industries.Computer]: {\n    Quality: 0.15,\n    Performance: 0.25,\n    Durability: 0.25,\n    Reliability: 0.2,\n    Aesthetics: 0.05,\n    Features: 0.1,\n  },\n  Computer: {\n    //Repeat\n    Quality: 0.15,\n    Performance: 0.25,\n    Durability: 0.25,\n    Reliability: 0.2,\n    Aesthetics: 0.05,\n    Features: 0.1,\n  },\n  [Industries.Robotics]: {\n    Quality: 0.1,\n    Performance: 0.2,\n    Durability: 0.2,\n    Reliability: 0.2,\n    Aesthetics: 0.1,\n    Features: 0.2,\n  },\n  [Industries.Software]: {\n    Quality: 0.2,\n    Performance: 0.2,\n    Reliability: 0.2,\n    Durability: 0.2,\n    Features: 0.2,\n  },\n  [Industries.Healthcare]: {\n    Quality: 0.4,\n    Performance: 0.1,\n    Durability: 0.1,\n    Reliability: 0.3,\n    Features: 0.1,\n  },\n  [Industries.RealEstate]: {\n    Quality: 0.2,\n    Durability: 0.25,\n    Reliability: 0.1,\n    Aesthetics: 0.35,\n    Features: 0.1,\n  },\n};\n","/**\n * Generic Event Emitter class following a subscribe/publish paradigm.\n */\nfunction uuidv4(): string {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport class EventEmitter<T extends any[]> {\n  subscribers: { [key: string]: (...args: [...T]) => void | undefined } = {};\n\n  subscribe(s: (...args: [...T]) => void): () => void {\n    let uuid = uuidv4();\n    while (this.subscribers[uuid] !== undefined) uuid = uuidv4();\n    this.subscribers[uuid] = s;\n\n    return () => {\n      delete this.subscribers[uuid];\n    };\n  }\n\n  emit(...args: [...T]): void {\n    for (const s in this.subscribers) {\n      const sub = this.subscribers[s];\n      if (sub === undefined) continue;\n\n      sub(...args);\n    }\n  }\n}\n","import { Theme } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport Fade from \"@mui/material/Fade\";\nimport M from \"@mui/material/Modal\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport makeStyles from \"@mui/styles/makeStyles\";\nimport { SxProps } from \"@mui/system\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    modal: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    paper: {\n      backgroundColor: theme.palette.background.default,\n      border: \"2px solid \" + theme.palette.primary.main,\n      boxShadow: `0px 3px 5px -1px ${theme.palette.primary.dark},0px 5px 8px 0px ${theme.palette.primary.dark},0px 1px 14px 0px ${theme.palette.primary.dark}`,\n      padding: 2,\n      maxWidth: \"80%\",\n      maxHeight: \"80%\",\n      overflow: \"auto\",\n      \"&::-webkit-scrollbar\": {\n        // webkit\n        display: \"none\",\n      },\n      scrollbarWidth: \"none\", // firefox\n    },\n  }),\n);\n\ninterface IProps {\n  open: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  sx?: SxProps<Theme>;\n}\n\nexport const Modal = (props: IProps): React.ReactElement => {\n  const classes = useStyles();\n  return (\n    <M\n      disableRestoreFocus\n      disableScrollLock\n      disableEnforceFocus\n      disableAutoFocus\n      open={props.open}\n      onClose={props.onClose}\n      closeAfterTransition\n      className={classes.modal}\n      sx={props.sx}\n    >\n      <Fade in={props.open}>\n        <div className={classes.paper}>\n          <Box sx={{ m: 2 }}>{props.children}</Box>\n        </div>\n      </Fade>\n    </M>\n  );\n};\n","import { dialogBoxCreate } from \"../../ui/React/DialogBox\";\n\ninterface IError {\n  fileName?: string;\n  lineNumber?: number;\n}\n\nexport const isIError = (v: unknown): v is IError => {\n  if (typeof v !== \"object\" || v == null) return false;\n  return v.hasOwnProperty(\"fileName\") && v.hasOwnProperty(\"lineNumber\");\n};\n\nexport function exceptionAlert(e: unknown): void {\n  console.error(e);\n  let msg = \"\";\n  let file = \"UNKNOWN FILE NAME\";\n  let line = \"UNKNOWN LINE NUMBER\";\n  if (isIError(e)) {\n    file = e.fileName ?? file;\n    line = e.lineNumber?.toString() ?? line;\n  } else {\n    msg = String(e);\n  }\n  dialogBoxCreate(\n    \"Caught an exception: \" +\n      msg +\n      \"<br><br>\" +\n      \"Filename: \" +\n      file +\n      \"<br><br>\" +\n      \"Line Number: \" +\n      line +\n      \"<br><br>\" +\n      \"This is a bug, please report to game developer with this \" +\n      \"message as well as details about how to reproduce the bug.<br><br>\" +\n      \"If you want to be safe, I suggest refreshing the game WITHOUT saving so that your \" +\n      \"save doesn't get corrupted\",\n  );\n}\n","import { IIndustry } from \"../IIndustry\";\n\n// Returns a boolean indicating whether the given material is relevant for the\n// current industry.\nexport function isRelevantMaterial(matName: string, division: IIndustry): boolean {\n  // Materials that affect Production multiplier\n  const prodMultiplierMats = [\"Hardware\", \"Robots\", \"AICores\", \"RealEstate\", \"AI Cores\", \"Real Estate\"];\n\n  if (Object.keys(division.reqMats).includes(matName)) {\n    return true;\n  }\n  if (division.prodMats.includes(matName)) {\n    return true;\n  }\n  if (prodMultiplierMats.includes(matName)) {\n    return true;\n  }\n\n  return false;\n}\n","import { NewIndustry } from './Corporation/Actions'\r\n\r\nexport {\r\n  NewIndustry\r\n}\r\n"],"sourceRoot":""}